{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Testes de Software","text":""},{"location":"aula1/","title":"Fundamentos de Testes","text":"<p>Problemas de software n\u00e3o se limitam \u00e0 pequenos inconvenientes, eles podem ser a causa de acidentes nos mais diversos n\u00edveis, inclusive fatalidades. A testagem correta de software \u00e9 necess\u00e1ria para evitar frustra\u00e7\u00f5es, perdas financeiras, gastos necess\u00e1rios, danos \u00e0 propriedade e at\u00e9 a morte de pessoas envolvidas, provenientes de falhas em software.</p> <p>Atualmente a vida humana depende intimamente de software, e para garantir uma qualidade de vida \u00e9 necess\u00e1rio fazer a testagem rigorosa dos softwares e sistemas, incluindo suas documenta\u00e7\u00f5es.</p>"},{"location":"aula1/#causas-de-defeitos-em-software","title":"Causas de defeitos em software","text":"<p>A causa inicial (root cause) dos defeitos geralmente encontra-se nas a\u00e7\u00f5es (ou aus\u00eancia de a\u00e7\u00f5es) humanas, como falha na especifica\u00e7\u00e3o de requisitos. J\u00e1 outras falhas n\u00e3o s\u00e3o causadas diretamente por seres humanos, mas sim por intera\u00e7\u00f5es entre o objeto de teste e seu ambiente, como uma falha de software em detrimento do aquecimento de componentes eletr\u00f4nicos.</p> <p>Uma ampla nomenclatura descreve o comportamento incorreto de software, mas o ISTQS (International Software Testing Qualifications Board) determina a utiliza\u00e7\u00e3o dos termos:</p> <ul> <li>Erro (error): a\u00e7\u00e3o humana na raiz de um defeito.</li> <li>Defeito (defect): resultado, presente no objeto de teste, de uma a\u00e7\u00e3o humana.</li> <li>Falha (failure): resultado da execu\u00e7\u00e3o de um defeito por um processo.</li> </ul> <p>Defeitos podem estar presentes em software e tamb\u00e9m em documentos.</p>"},{"location":"aula1/#testes-e-qualidade","title":"Testes e Qualidade","text":"<p>Testes e QA n\u00e3o s\u00e3o no\u00e7\u00f5es id\u00eanticas, a saber:</p> <ul> <li>A qualidade de software garante que os processos definidos pelas organiza\u00e7\u00f5es s\u00e3o implementados, e da forma correta.   Al\u00e9m disso, a qualidade de software visa aumentar a efici\u00eancia e efetividade desses processos.</li> <li>Testes identificam defeitos e falhas e fornecem informa\u00e7\u00f5es sobre o software e os riscos de lan\u00e7amento deste no   mercado.</li> </ul> <p>A comunidade de Testes de Software n\u00e3o \u00e9 uniforme, existem duas abordagem principais: tradicional e \u00e1gil.</p> <p>Na abordagem tradicional os testes s\u00e3o baseados em requisitos e especifica\u00e7\u00f5es, e o software \u00e9 analisado sistematicamente, com frequ\u00eancia gerando um grande volume de documenta\u00e7\u00e3o. Essa metodologia baseia-se na defini\u00e7\u00e3o e organiza\u00e7\u00e3o de atividades.</p> <p>J\u00e1 a abordagem \u00e1gil baseia-se nas recomenda\u00e7\u00f5es do Manifesto \u00c1gil, baseando-se em avalia\u00e7\u00f5es pragm\u00e1ticas de atividades de teste anteriores \u00e0 entrega do software.</p>"},{"location":"aula1/#terminologia","title":"Terminologia","text":"<p>As atividades de verifica\u00e7\u00e3o e valida\u00e7\u00e3o s\u00e3o complementares, a primeira responde \u00e0 quest\u00e3o \"o que foi especificado foi produzido?\", enquanto a segunda responde se \"o que foi constru\u00eddo \u00e9 o produto correto?\".</p> <p>Verifica\u00e7\u00e3o: confirma\u00e7\u00e3o de que os requisitos especificados foram contemplados. Valida\u00e7\u00e3o: confirma\u00e7\u00e3o de que os requisitos especificados foram contemplados para o uso esperado.</p>"},{"location":"aula1/#objetivos","title":"Objetivos","text":"<p>Testes de software focam-se nos seguintes aspectos:</p> <ul> <li>Detec\u00e7\u00e3o de falhas e defeitos;</li> <li>Fornecer informa\u00e7\u00e3o para a tomada de decis\u00f5es associadas ao n\u00edvel de risco da entrega de um software ao mercado.</li> </ul> <p>Os objetivos mais espec\u00edficos dos testes variam de acordo com a fase do desenvolvimento na qual eles s\u00e3o aplicados.</p> Fase Objetivo Design Encontrar o maior n\u00famero de defeitos e falhas, no menor per\u00edodo de tempo poss\u00edvel, para entregar um software de alta qualidade. Aceita\u00e7\u00e3o do cliente Mostrar que o software funciona de acordo com o esperado para obter aprova\u00e7\u00e3o do cliente. Fases operacionais Enquanto o software est\u00e1 sendo usado, os testes focam em garantir que os requisitos exigidos est\u00e3o sendo contemplados. Evolu\u00e7\u00e3o/Manuten\u00e7\u00e3o de corre\u00e7\u00e3o Garantir que as corre\u00e7\u00f5es e evolu\u00e7\u00f5es n\u00e3o introduzem defeitos no software, al\u00e9m de verificar se n\u00e3o ocorrem efeitos colaterais (via testes de regress\u00e3o). Descarte/Substitui\u00e7\u00e3o Os testes criam uma snapshot do antigo produto, para que o produto subsequente possua as mesmas funcionalidades.  Tabela 1: Objetivos da testagem de software. Fonte: autor."},{"location":"aula1/#testes-e-depuracao","title":"Testes e depura\u00e7\u00e3o","text":"<p>De acordo com a ISO 05, Testagem \u00e9 a identifica\u00e7\u00e3o de uma ou mais caracter\u00edsticas de acordo com um procedimento definido. No contexto de testagem de software, um teste possui os seguintes elementos:</p> <ul> <li>Objetivo (caracter\u00edsticas que ser\u00e3o confirmadas);</li> <li>Uma forma de determinar as caracter\u00edsticas (o processo definido e sua execu\u00e7\u00e3o);</li> <li>Uma atividade (a execu\u00e7\u00e3o do procedimento para obter um resultado);</li> <li>Um resultado (a presen\u00e7a ou aus\u00eancia da caracter\u00edstica no n\u00edvel esperado);</li> </ul> <p>A depura\u00e7\u00e3o consiste no conserto de defeitos em software realizado pelos desenvolvedores, por meio da busca e remo\u00e7\u00e3o de causas exatas de falha. Essa tarefa n\u00e3o est\u00e1 envolvida no processo de testa.</p>"},{"location":"aula1/#paradoxos-e-principios","title":"Paradoxos e Princ\u00edpios","text":"<ul> <li>Testes identificam a presen\u00e7a de defeitos, mas n\u00e3o podem assegurar a aus\u00eancia destes;</li> <li>N\u00e3o \u00e9 poss\u00edvel usar t\u00e9cnicas exaustivas para testar \"tudo\";</li> <li>Quanto mais cedo os testes s\u00e3o realizados, menos custoso ser\u00e1 consertar os defeitos encontrados;</li> <li>Localidade dos defeitos, i. e., se um defeito foi encontrado em um trecho de c\u00f3digo, trechos produzidos no mesmo   per\u00edodo ou pela mesma pessoa, por exemplo, apresentam uma maior chance de apresentar defeitos.</li> <li>Aplicar sempre os mesmos testes ao longo do tempo n\u00e3o \u00e9 eficiente.</li> <li>A testagem depende do contexto;</li> <li>Aus\u00eancia de erros n\u00e3o indica, necessariamente, qualidade do produto.</li> </ul>"},{"location":"aula1/#referencias","title":"Refer\u00eancias","text":"<p>[1] HOM\u00c8S, B. Fundamentals of Software Testings.</p>"},{"location":"aula2/","title":"Psicologia e Economia em Testes de Software","text":""},{"location":"aula2/#psicologia","title":"Psicologia","text":"<p>Com frequ\u00eancia testas s\u00e3o definidos como processos para \"demonstrar que um software funciona sem problemas\" ou \" demonstrar a aus\u00eancia de erros no software\", por exemplo, sendo estas defini\u00e7\u00f5es equivocadas, visto que o processo de testes visa agregar valor a um programa, aumentando sua qualidade e confiabilidade, por meio da remo\u00e7\u00e3o de erros. Para que esse objetivo seja alcan\u00e7ado, o testador deve partir da premissa de que o programa possui erros e ent\u00e3o test\u00e1-lo para encontrar a maior quantidade de erros poss\u00edvel.</p> <p>A defini\u00e7\u00e3o de um objetivo est\u00e1 intimamente ligada \u00e0 psicologia, j\u00e1 que as a\u00e7\u00f5es dos seres humanos s\u00e3o movidos por objetivos. Ao definir o objetivo do teste como \"demonstrar a aus\u00eancia falhas\", esse objetivo torna-se dif\u00edcil de ser alcan\u00e7ado, j\u00e1 que assegurar a aus\u00eancia de falhas \u00e9 algo imposs\u00edvel, de um ponto de vista pr\u00e1tico. Por outro lado, a defini\u00e7\u00e3o do objetivo do teste como \"encontrar a maior quantidade de erros poss\u00edvel\" \u00e9 mais quantificada, e gera uma sensa\u00e7\u00e3o de sucesso ao testador ao encontrar erros. Estudos psicol\u00f3gicos demonstram que as pessoas obt\u00eam melhor desempenho ao executar tarefas com maior chance de sucesso. Desta forma, h\u00e1 um ganho psicol\u00f3gico nas atividades de testagem ao classificarmos a qualidade de um teste em rela\u00e7\u00e3o \u00e0 quantidade de erros encontrados.</p>"},{"location":"aula2/#economia","title":"Economia","text":"<p>Ap\u00f3s a defini\u00e7\u00e3o de um objetivo para os testes, sendo a de encontrar todos os erros poss\u00edveis, \u00e9 necess\u00e1rio definir estrat\u00e9gias econ\u00f4micas para alcan\u00e7ar esses objetivos. Duas das estrat\u00e9gias mais comuns de testes s\u00e3o os testes de caixa preta e de caixa branca.</p>"},{"location":"aula2/#testes-caixa-preta-black-box-testing","title":"Testes Caixa-Preta (Black-Box Testing)","text":"<p>Os testes Caixa-Preta (tamb\u00e9m conhecidos por data-driven ou input/output-driven) encaram o programa como uma caixa preta, n\u00e3o se importando com como as informa\u00e7\u00f5es s\u00e3o processadas em um programa, ao manter o foco no comportamento do sistema frente \u00e0s especifica\u00e7\u00f5es, nessa abordagem os dados para teste originam-se unicamente das especifica\u00e7\u00f5es. Para encontrar todos os erros com essa t\u00e9cnica, seria necess\u00e1rio testar todas as combina\u00e7\u00f5es poss\u00edveis de entrada em um software, mas como testes exaustivos n\u00e3o s\u00e3o poss\u00edveis, o objetivo principal \u00e9 maximizar o n\u00famero de erros encontrado para um n\u00famero finito de casos de teste. Para atingir esse objetivo, o testador deve conseguir supor baseado nos resultados dos testes. Por exemplo, ao testar um programa que classifica um tri\u00e2ngulo em rela\u00e7\u00e3o \u00e0s medidas dos seus lados (is\u00f3sceles, escaleno ou equil\u00e1tero), se uma entrada <code>2, 2, 2</code> gerou a sa\u00edda <code>equil\u00e1tero</code>, o testador pode fazer a suposi\u00e7\u00e3o razo\u00e1vel de que o comportamento se repetir\u00e1 para <code>3, 3, 3</code>, por exemplo.</p>"},{"location":"aula2/#testes-caixa-branca-white-box-testing","title":"Testes Caixa-Branca (White-Box Testing)","text":"<p>Os testes Caixa-Branca (ou logic-driven) permitem uma an\u00e1lise da estrutura interna do programa, e nessa abordagem os casos de teste s\u00e3o derivados de uma an\u00e1lise da estrutura l\u00f3gica do programa. Testar exaustivamente nessa abordagem seria elaborar um caso de teste para cada caminho l\u00f3gico do c\u00f3digo, o que \u00e9 praticamente imposs\u00edvel, n\u00e3o determina a adequa\u00e7\u00e3o do software \u00e0 especifica\u00e7\u00e3o e n\u00e3o identifica erros relacionados \u00e0 aus\u00eancia de caminhos l\u00f3gicos no programa.</p>"},{"location":"aula2/#principios-dos-testes-de-software","title":"Princ\u00edpios dos Testes de Software","text":"<p>A partir das quest\u00f5es discutidas nas se\u00e7\u00f5es anteriores, \u00e9 poss\u00edvel identificar um conjunto de princ\u00edpios para testes:</p> <ul> <li>Um teste deve conter uma defini\u00e7\u00e3o da sa\u00edda ou resultado esperado.</li> <li>Um programador deve evitar testar seu pr\u00f3prio programa.</li> <li>Uma empresa de programa\u00e7\u00e3o n\u00e3o deve testar seus pr\u00f3prios programas.</li> <li>Qualquer processo de teste deve conter uma inspe\u00e7\u00e3o detalhada dos resultados de cada teste.</li> <li>Casos de teste devem ser escritos com condi\u00e7\u00f5es de entrada inv\u00e1lidas, inesperadas, v\u00e1lidas e esperadas.</li> <li>Um programa deve ser inspecionado para investigar se ele n\u00e3o faz o que deveria e tamb\u00e9m se ele faz o que n\u00e3o   deveria.</li> <li>Casos de teste n\u00e3o devem ser descartados a menos que o programa serja descart\u00e1vel.</li> <li>Testes devem ser planejados com o intuito de encontrar erros.</li> <li>A probabilidade de exist\u00eancia de mais erros em uma se\u00e7\u00e3o do programa \u00e9 proporcional ao n\u00famero de erros j\u00e1 encontrados   naquela se\u00e7\u00e3o.</li> <li>Testar \u00e9 uma atividade de criatividade e desafio intelectual.</li> </ul>"},{"location":"aula2/#testagem-de-software-sistematica-e-eficaz","title":"Testagem de Software Sistem\u00e1tica e Eficaz","text":"<p>Atualmente est\u00e3o dispon\u00edveis diversas ferramentas para testes, como JUnit, AssertJ e Selenium, por exemplo, e embora a comunidade de desenvolvedores tenha se apropriado bem dessas ferramentas, ainda h\u00e1 falhas na utiliza\u00e7\u00e3o de t\u00e9cnicas mais sistem\u00e1ticas para encontrar erros.</p>"},{"location":"aula2/#testagem-durante-o-desenvolvimento","title":"Testagem Durante o Desenvolvimento","text":"<p>Os testes podem integrar-se \u00e0s etapas de desenvolvimento seguindo o seguinte fluxo interativo:</p> <ol> <li>O desenvolvimento inicia-se a partir de um requisito, que pode estar especificado em diversos formatos.</li> <li>O desenvolvedor desenvolve pequenos ciclos de TDD (test-driven development) para ter feedback r\u00e1pido sobre o    c\u00f3digo. Esses ciclos tamb\u00e9m auxiliam durante as refatora\u00e7\u00f5es que ocorrem durante a codifica\u00e7\u00e3o de novas    funcionalidades.</li> <li>O desenvolvedor cria v\u00e1rias unidades (m\u00e9todos e classes), com diferentes regras de neg\u00f3cio, para atingir a    funcionalidade desejada. Nesse momento o desenvolvedor deve ter em mente a testabilidade desse c\u00f3digo.</li> <li>Ao finalizar as unidades e entender que o requisito est\u00e1 contemplado, o desenvolvedor parte para a etapa de testes,    usando as t\u00e9cnicas: domain testing, boundary testing e structural testing.</li> <li>Algumas partes do sistema podem exigir testes maiores, como testes de integra\u00e7\u00e3o, escritos utilizando-se as    mesmas t\u00e9cnicas citadas no item anterior.</li> <li>Ap\u00f3s a cria\u00e7\u00e3o dos casos de teste, o desenvolvedor utiliza ferramentas inteligentes e automatizadas para localizar    testes n\u00e3o    identificados por ele.</li> <li>Ap\u00f3s essa sess\u00e3o completa e detalhada de testes, o desenvolvedor se sente seguro para fazer sua release.</li> </ol>"},{"location":"aula2/#diretrizes-dos-testes-de-software","title":"Diretrizes dos Testes de Software","text":"<p>A seguir, os princ\u00edpios e diretrizes para a testagem de software.</p> <ol> <li> <p>Testes exaustivos s\u00e3o imposs\u00edveis</p> </li> <li> <p>Por esse motivo, \u00e9 importante fazer testes eficazes.</p> </li> <li> <p>Saber quando parar de testar</p> </li> <li> <p>O paradoxo do Pesticida</p> </li> <li> <p>N\u00e3o existe t\u00e9cnica de teste efetiva em 100% dos casos, por isso testadores devem usar diferentes t\u00e9cnicas de    teste.</p> </li> <li> <p>Bugs aglomeram-se</p> </li> <li> <p>Princ\u00edpio da localidade e temporalidade, uma vez encontrado um bug, \u00e9 prov\u00e1vel encontrar outros na mesma regi\u00e3o, criados pela mesma pessoa e/ou no mesmo per\u00edodo.</p> </li> <li> <p>Nenhum teste ser\u00e1 perfeito ou suficiente</p> </li> <li> <p>Contexto \u00e9 essencial</p> </li> <li> <p>Utilizar casos de teste em contextos diferentes (exemplo: aplica\u00e7\u00f5es mobile e web) n\u00e3o \u00e9 eficiente.</p> </li> <li> <p>Verifica\u00e7\u00e3o n\u00e3o \u00e9 valida\u00e7\u00e3o</p> </li> <li> <p>Verifica\u00e7\u00e3o: confirma\u00e7\u00e3o de que os requisitos especificados foram contemplados; -   Valida\u00e7\u00e3o: confirma\u00e7\u00e3o    de que os requisitos especificados foram contemplados para o uso esperado.</p> </li> </ol>"},{"location":"aula2/#a-piramide-de-testes","title":"A Pir\u00e2mide de Testes","text":"<p>Existem tr\u00eas n\u00edveis de testes: unit\u00e1rios, de integra\u00e7\u00e3o e de sistema, e a utiliza\u00e7\u00e3o desses n\u00edveis varia conforme os objetivos (Figura 1).</p> <p></p>  Figura 1. Pir\u00e2mide dos n\u00edveis de teste. Fonte: [2]"},{"location":"aula2/#testes-unitarios","title":"Testes Unit\u00e1rios","text":"<p>Os testes unit\u00e1rios testam as unidades (classes e m\u00e9todos, por exemplo) isoladamente.</p> <p>Esses testes s\u00e3o r\u00e1pidos, f\u00e1ceis de controlar e de escrever. Por\u00e9m, est\u00e3o distantes da realidade do programa todo e n\u00e3o identificam algumas categorias de bugs, como, por exemplo, os provenientes da comunica\u00e7\u00e3o entre componentes.</p>"},{"location":"aula2/#testes-de-integracao","title":"Testes de Integra\u00e7\u00e3o","text":"<p>Os testes de integra\u00e7\u00e3o testam m\u00faltiplos componentes de um sistema juntos, focando em suas intera\u00e7\u00f5es ao inv\u00e9s de testar o sistema todo.</p> <p>Esses testes podem ser utilizados, por exemplo, para testar a comunica\u00e7\u00e3o entre classes e o banco de dados.</p>"},{"location":"aula2/#testes-de-sistema","title":"Testes de Sistema","text":"<p>Os testes de sistema testam todas as partes de um sistema.</p> <p>Essa categoria de teste n\u00e3o se preocupa com o funcionamento interno do sistema (teste caixa-branca), focando se as entradas geram as sa\u00eddas esperadas.</p> <p>Esses testes s\u00e3o mais demorados que testes unit\u00e1rios, mais dif\u00edceis de escrever a mais prop\u00edcios a resultados errados, provenientes de fatores externos, como, por exemplo, a velocidade da internet utilizada na hora do teste.</p>"},{"location":"aula2/#referencias","title":"Refer\u00eancias","text":"<p>[1] MYERS, G., et al. The Art of Software Testing. ProQuest Ebook Central, dispon\u00edvel no link.</p> <p>[2] ANICHE, M. Effective Software Testing. Manning live book, dispon\u00edvel no link.</p>"},{"location":"aula3/","title":"T\u00e9cnicas de Teste Caixa-Preta","text":""},{"location":"aula3/#test-case-design","title":"Test-Case Design","text":"<p>Uma vez que a a testagem n\u00e3o garante a aus\u00eancia completa de erros, a estrat\u00e9gia que deve ser adotada ao elaborar casos de teste \u00e9 determinar qual conjunto de casos de testes tem melhores probabilidades de encontrar a maior quantidade de erros.</p> <p>Em geral, a metodologia mais ineficiente \u00e9 o teste com valores aleat\u00f3rios, pois possui a menor probabilidade de encontrar erros. Uma boa escolha de casos de teste usa conceitos de testes caixa-branca e caixa-preta.</p>"},{"location":"aula3/#testes-caixa-preta","title":"Testes Caixa-Preta","text":"<p>Testes caixa-preta s\u00e3o derivados a partir das especifica\u00e7\u00f5es de um programa, e t\u00eam como objetivo identificar \u00e1reas nas quais o programa n\u00e3o se comporta como especificado.</p>"},{"location":"aula3/#particoes-equivalentes","title":"Parti\u00e7\u00f5es Equivalentes","text":"<p>J\u00e1 que a testagem exaustiva n\u00e3o \u00e9 poss\u00edvel, o testador deve selecionar um subconjunto de entradas poss\u00edveis para testar um programa, com uma altas probabilidades de encontrar a maior quantidade de erros.</p> <p>Uma ideia razo\u00e1vel \u00e9 particionar o conjunto infinito de entradas poss\u00edveis em subconjuntos representantes de uma parcela, seguindo duas propriedades:</p> <ol> <li>Um caso de teste reduz, em mais do que um, o n\u00famero de outros casos de teste que devem ser elaborados para atingir algum objetivo pr\u00e9 definido de testagem.</li> <li>Um caso de teste cobra um grande conjunto de outros casos de teste poss\u00edveis, ou seja, ele informa sobre a presen\u00e7a ou aus\u00eancia de erros sobre um conjunto de valores de entrada.</li> </ol> <p>Essas duas considera\u00e7\u00f5es comp\u00f5em a t\u00e9cnica caixa-preta de testagem denominada parti\u00e7\u00e3o em equivalentes, por meio da seguinte metodologia:</p> <ol> <li>Selecionar condi\u00e7\u00f5es para testagem utilizando a segunda propriedade, gerando classes equivalentes.</li> <li>Determinar o menor n\u00famero poss\u00edvel de entradas para casos de teste cobrindo essas condi\u00e7\u00f5es, utilizando a primeira propriedade, definindo casos de teste.</li> </ol>"},{"location":"aula3/#identificando-as-classes-equivalentes","title":"Identificando as Classes Equivalentes","text":"<p>S\u00e3o identificadas tomando-se uma condi\u00e7\u00e3o de entrada e particionando-a em dois ou mais grupos, dentre eles \"equival\u00eancias v\u00e1lidas\" e \"equival\u00eancias inv\u00e1lidas\".</p> <p>Diretrizes para identificar classes equivalentes:</p> <ol> <li>Se uma condi\u00e7\u00e3o de entrada especifica um intervalo de entrada (1 &lt; x &lt; 50), identifique uma classe equivalente v\u00e1lida (e. g. x = 45) e duas inv\u00e1lidas (e. g. x &lt; 1  e x &gt; 50).</li> <li>Se uma condi\u00e7\u00e3o de entrada especifica uma quantidade de valores (e. g. \"Um aluno pode matricular-se de 1 at\u00e9 8 mat\u00e9rias por semestre\"), identifique uma classe v\u00e1lida e duas inv\u00e1lidas (nenhuma mat\u00e9ria ou mais do que 9 mat\u00e9rias).</li> <li>Se uma condi\u00e7\u00e3o de entrada especifica um conjunto de valores v\u00e1lidos (e. g. tipo de documento: CPF, RG e PASSAPORTE), provavelmente o tratamento de cada uma delas \u00e9 diferente, identifique uma classe v\u00e1lida para cada elemento desse conjunto e uma classe inv\u00e1lida (e. g. CDI).</li> <li>Se uma condi\u00e7\u00e3o de entrada define uma situa\u00e7\u00e3o obrigat\u00f3ria, como \"o primeiro caractere do identificador deve ser uma letra\", identifique uma classe v\u00e1lida (satisfazendo a condi\u00e7\u00e3o) e uma inv\u00e1lida (n\u00e3o satisfazendo a condi\u00e7\u00e3o).</li> </ol>"},{"location":"aula3/#identificando-os-casos-de-teste","title":"Identificando os Casos de Teste","text":"<p>Depois de identificar as classes de equival\u00eancia, os casos de teste s\u00e3o identificados, a partir delas, pelo seguinte processo:</p> <ol> <li>Determine um valor \u00fanico para cada classe de equival\u00eancia.</li> <li>Escreva novos casos de teste cobrindo o m\u00e1ximo de classes v\u00e1lidas n\u00e3o cobertas, at\u00e9 que todas as classes v\u00e1lidas sejam cobertas.</li> <li>Escreva um caso de testes para cobrir uma, e apenas uma, das classes inv\u00e1lidas n\u00e3o cobertas, at\u00e9 que todas sejam cobertas.</li> </ol> <p>A ideia de escrever testes \u00fanicos para as classes inv\u00e1lidas \u00e9 evitar que os resultados dos testes sejam mascarados por outros casos de testes.</p>"},{"location":"aula3/#boundary-value-analysis","title":"Boundary Value Analysis","text":"<p>Valores de fronteira (ou borda) s\u00e3o aqueles diretamente acima ou abaixo das fronteiras dos valores de entrada e sa\u00edda das classes de equival\u00eancia. A an\u00e1lise dos valores de borda se distingue das parti\u00e7\u00f5es equivalentes nos seguintes aspectos:</p> <ol> <li>Ao inv\u00e9s de escolher-se qualquer elemento em uma classe de equival\u00eancia como representativo, a an\u00e1lise dos valores de fronteira requer que um ou mais elementos sejam selecionados de forma que cada ponta da classe de equival\u00eancia seja testada.</li> <li>Testes s\u00e3o derivados tanto das condi\u00e7\u00f5es de entrada como das sa\u00eddas poss\u00edveis (espa\u00e7o de resultados).</li> </ol> <p>Algumas diretrizes para elabora\u00e7\u00e3o desses testes s\u00e3o:</p> <ol> <li>Se uma condi\u00e7\u00e3o de entrada especifica um intervalo de entrada (1 &lt; x &lt; 50), escreva casos de teste para as pontas do intervalo e casos de entrada inv\u00e1lidos para valores logo acima (ou abaixo) das fronteiras (e. g. x = 0, 1, 50 e 51).</li> <li>Se uma condi\u00e7\u00e3o de entrada especifica uma quantidade de valores (e. g. \"Um aluno pode matricular-se de 1 at\u00e9 8 mat\u00e9rias por semestre\"), escreva testes para valores de entrada logo acima (ou abaixo) dos valores (e. g. 0, 1, 8 e 9 mat\u00e9rias).</li> <li>Use a diretriz 1. para os valores de sa\u00edda (e. g. Se um programa calcula valores juros resultando entre R$0,00 e R$150.000,00, escreva casos de teste para gerarem as sa\u00eddas -0,01, 0, 150 mil e 150.000,01).</li> <li>Aplique a diretriz 2. para os valores de sa\u00edda (e. g. Se um programa exibe uma lista dos \u00faltimos 5 documentos baixados, insira 0, 1, 2, 3, 4, 5 e 6para testar a exibi\u00e7\u00e3o).</li> <li>Se a entrada ou sa\u00edda de um programa \u00e9 ordenado, destine aten\u00e7\u00e3o aos primeiro e \u00faltimo elementos do conjunto.</li> </ol>"},{"location":"aula3/#cause-effect-graphing","title":"Cause-effect graphing","text":"<p>Um grafo de causa-efeito \u00e9 uma maneira de traduzir em linguagem formal a linguagem natural da especifica\u00e7\u00e3o. O grafo \u00e9, na verdade, um circuito l\u00f3gico digital com uma nota\u00e7\u00e3o simplificada.</p> <p>Para derivar os casos de teste, \u00e9 necess\u00e1rio seguir os seguintes passos:</p> <ol> <li>Dividir a especifica\u00e7\u00e3o em partes trabalh\u00e1veis.</li> <li>Identificar as causas e efeitos na especifica\u00e7\u00e3o, uma causa \u00e9 uma condi\u00e7\u00e3o distinta de entrada ou uma classe de equival\u00eancia de entradas, e um efeito \u00e9 uma condi\u00e7\u00e3o de sa\u00edda ou uma transforma\u00e7\u00e3o de sistema. Cada causa e efeito \u00e9 identificada com um \u00fanico n\u00famero.</li> <li>A sem\u00e2ntica da especifica\u00e7\u00e3o \u00e9 transformada em um grafo \"booleano\" ligando as causas e efeitos.</li> <li>O grafo \u00e9 anotado com restri\u00e7\u00f5es descrevendo as combina\u00e7\u00f5es de causas e ou efeitos que s\u00e3o imposs\u00edveis por motivos de sintaxe ou restri\u00e7\u00f5es de ambiente.</li> <li>Fazendo o rastro de cada condi\u00e7\u00e3o no grafo, uma tabela de decis\u00f5es de entrada \u00e9 criada. Cada coluna representa um caso de teste.</li> </ol> <p>A nota\u00e7\u00e3o utilizada no diagrama est\u00e1 representada na figura 1.</p> <p></p> <p>Fun\u00e7\u00f5es utilizadas:</p> <ul> <li>Identidade: <code>b = (a==1) ? 1 : 0;</code></li> <li>Not: <code>b = (a==1) ? 0 : 1;</code></li> <li>Or: <code>d = (a==1 || b==1 || c==1) ? 1 : 0;</code></li> <li>And: <code>c = (a==1 &amp;&amp; b==1) ? 1 : 0;</code></li> </ul> <p>0 e 1 denotam o estado ausente e presente para as causas e efeitos.</p> <p>Para ilustrar as restri\u00e7\u00f5es entre as causas, utiliza-se a nota\u00e7\u00e3o representada na figura 2.</p> <p></p> <p>Restri\u00e7\u00f5es entre causas:</p> <ul> <li>E: ou exclusivo (XOR), ou a, ou b, mas n\u00e3o ambos.</li> <li>I: ao menos um deve ser 1.</li> <li>O: apenas um pode ser 1.</li> <li>R: para que <code>a==1</code>, b deve ser 1.</li> </ul> <p>Tamb\u00e9m h\u00e1 a restri\u00e7\u00e3o Mask entre efeitos (figura 3)</p> <p></p> <p>Restri\u00e7\u00e3o entre efeitos</p> <ul> <li>M: Se <code>a==1</code>, ent\u00e3o <code>b==0</code>.</li> </ul>"},{"location":"aula3/#higher-order-testing","title":"Higher-Order Testing","text":"<p>O processo de desenvolvimento de software perpassa v\u00e1rias etapas, e falhas na comunica\u00e7\u00e3o entre essas etapas pode gerar erros. Al\u00e9m disso, durante as etapas s\u00e3o elaborados artefatos de documenta\u00e7\u00e3o:</p> <ul> <li>Requisitos, que especificam porqu\u00ea o programa \u00e9 desejado.</li> <li>Objetivos, que especificam o que o programa deve fazer e qu\u00e3o bem isso deve ser feito.</li> <li>Especifica\u00e7\u00f5es externas, que definem a representa\u00e7\u00e3o exata do programa para os usu\u00e1rios.</li> <li>Documenta\u00e7\u00e3o associada com os processos seguintes, com maiores n\u00edveis de detalhe, que especifica como o programa \u00e9 constru\u00eddo.</li> </ul> <p>Para evitar erros no tratamento de informa\u00e7\u00f5es entre as etapas de desenvolvimento, \u00e9 poss\u00edvel seguir tr\u00eas diretrizes:</p> <ol> <li>Introdu\u00e7\u00e3o de mais precis\u00e3o no processo de desenvolvimento;</li> <li>Introdu\u00e7\u00e3o de verifica\u00e7\u00e3o no final de cada processo;</li> <li>Utilizar processos distintos de testes para cada processo de desenvolvimento.</li> </ol> <p></p> <p>O objetivo dos testes:</p> <ul> <li>de m\u00f3dulo \u00e9 encontrar discrep\u00e2ncias entre os m\u00f3dulos dos programas e as especifica\u00e7\u00f5es de suas interfaces.</li> <li>de fun\u00e7\u00e3o \u00e9 mostrar que um sistema n\u00e3o est\u00e1 de acordo com a sua especifica\u00e7\u00e3o externa.</li> <li>de sistema \u00e9 mostrar que o produto \u00e9 inconsistente com os objetivos originais.</li> </ul>"},{"location":"aula3/#testes-de-funcao","title":"Testes de Fun\u00e7\u00e3o","text":"<p>S\u00e3o atividades de teste caixa-preta que visam encontrar discrep\u00e2ncias entre um sistema e sua especifica\u00e7\u00e3o externa, do ponto de vista do usu\u00e1rio final. Para realizar esse tipo de teste \u00e9 poss\u00edvel utilizar as t\u00e9cnicas de teste caixa-preta mencionadas anteriormente, como, por exemplo, particionamento em equivalentes ou an\u00e1lise dos valores de borda.</p>"},{"location":"aula3/#referencias","title":"Refer\u00eancias","text":"<p>[1] MYERS, G., et al. The Art of Software Testing. ProQuest Ebook Central, dispon\u00edvel no link.</p>"},{"location":"aula4/","title":"Testes Caixa-Branca","text":"<p>Esse tipo de teste preocupa-se com o quando os casos de teste cobrem a l\u00f3gica do programa. O caso de teste ideal seria testar todos os caminhos do programa, o que n\u00e3o \u00e9 poss\u00edvel, principalmente para programas com loops.</p> <p>Um bom crit\u00e9rio de cobertura l\u00f3gica \u00e9 conhecido por cobertura de decis\u00f5es, que determina que cada decis\u00e3o tenha uma sa\u00edda verdadeira e uma falsa ao mesmo uma vez, ou seja, que todos os caminhos sejam percorridos.</p> <p>Existem tr\u00eas exce\u00e7\u00f5es para cobertura usando esse crit\u00e9rio:</p> <ul> <li>Programas sem decis\u00f5es</li> <li>Programas com m\u00faltiplos pontos de entrada</li> <li>Trechos em ON-units.</li> </ul> <p>Um crit\u00e9rio melhor \u00e9 a cobertura de condi\u00e7\u00f5es, mas tamb\u00e9m n\u00e3o garante uma cobertura de todos os caminhos. O que \u00e9 resolvido pelo crit\u00e9rio decis\u00e3o/condi\u00e7\u00e3o, que exige que cada condi\u00e7\u00e3o em uma decis\u00e3o tenha todas as sa\u00eddas poss\u00edveis testadas, e que cada ponto de entrada seja executado ao menos uma vez. Esse \u00faltimo crit\u00e9rio tamb\u00e9m possui falhas, j\u00e1 que condi\u00e7\u00f5es envolvendo <code>or</code> e <code>and</code> podem mascarar o resultado de outras condi\u00e7\u00f5es.</p> <p>Um crit\u00e9rio que visa solucionar esse \u00faltimo problema \u00e9 a cobertura de m\u00faltiplas condi\u00e7\u00f5es, que requer que sejam escritos casos de testes de forma que todas as combina\u00e7\u00f5es de sa\u00edda de condi\u00e7\u00f5es em cada decis\u00e3o e em cada ponto de entrada seja executada ao menos uma vez.</p> <p>Os testes come\u00e7am dos m\u00f3dulos que n\u00e3o s\u00e3o invocados por outros, usando 'stubs' no lugar de suas depend\u00eancias. Come\u00e7am com os m\u00f3dulos terminais de uma aplica\u00e7\u00e3o.</p>"},{"location":"aula5/","title":"Test Driven Development (TDD)","text":""},{"location":"aula5/#test-driven-development","title":"Test-driven Development","text":""},{"location":"aula5/#chapter-1","title":"Chapter 1","text":"<p>TDD is a simple procedure of writing tests before the actual implementation. It's an inversion of a traditional approach where testing is performed after the code is written.</p> <p>Red-green-refactor: Test-driven development is a process that relies on the repetition of a very short development cycle. It is based on the test-first concept of extreme programming that encourages simple design with a high level of confidence. While writing tests we're in the red state, when the implementation of a test is finished, all tests should pass and then we'll be in the green state.</p> <p>When a test fails, the programmer should spend little time trying to fix it. So, if the change can't be done in a matter of minutes it's better to revert the changes and start over.</p> <p>After all tests are passing, it's time to refactor the code, if the refactor breaks an existing functionality the tests will show and the changes must be reverted.</p>"},{"location":"aula5/#speed-is-the-key","title":"Speed is the key","text":"<p>The first implementation should not be focused on perfection, the idea is to keep switching between tests and implementation as fast as a game of ping-pong.</p> <p>The time between changing from tests to implementation should be measured in minutes or seconds.</p> <p>TDD is a solution to approach the design in a different way, in such the programmer is forced to think about the implementation and about what the code needs to do before implementation. The main objective of TDD is testable code design with tests as a very useful side product.</p> <p>Tests that are defined by an already existing application are biased. They have a tendency to confirm what code does, and not to test whether client's expectations are met, or that the code is behaving as expected.</p>"},{"location":"aula5/#mocking","title":"Mocking","text":"<p>In order for tests to run fast and provide constant feedback, code needs to be organized in such a way that the methods, functions, and classes can be easily replaced with mocks and stubs. With or without mocks, the code should be written in a way that we can easily replace one dependency with another.</p>"},{"location":"aula5/#chapter-3-red-green-state","title":"Chapter 3 - Red-Green State","text":"<p>The following code extracts use this structure:</p> TicTacToe.java<pre><code>enum Piece {\nX, O\n}\n\nenum Result {\nDRAW, X_WIN, O_WIN\n}\n\npublic class TicTacToe {\n\nprivate final int SIZE = 3;\nprivate final Piece[][] board;\nprivate int filledSpaces = 0;\n\nprivate Piece lastPlayed;\n\n\npublic TicTacToe() {\nthis.lastPlayed = null;\nthis.board = new Piece[SIZE][SIZE];\nfor (int i = 0; i &lt; SIZE; i++)\nfor (int j = 0; j &lt; SIZE; j++)\nthis.board[i][j] = null;\n\n}\n\n}\n</code></pre>"},{"location":"aula5/#requirement-1","title":"Requirement 1","text":"<p>A piece can be placed on any empty space of a 3\u00d73 board.</p>"},{"location":"aula5/#req1-red-state","title":"REQ1 - Red State","text":"<p>Tests for this requirement:</p> TicTacToeSpec.java<pre><code>    @Rule\npublic ExpectedException exception = ExpectedException.none();\nprivate TicTacToe board;\n\n@Before\npublic final void before() {\nboard = new TicTacToe();\n}\n\n@Test\npublic void whenPiecePlacedOutsideXAxisThrowRuntimeException() {\nexception.expect(RuntimeException.class);\nboard.play(4, 2);\n}\n\n@Test\npublic void whenPiecePlacedInNegativeXExpectRuntimeError() {\nexception.expect(RuntimeException.class);\nboard.play(-1, 2);\n}\n\n@Test\npublic void whenPiecePlacedInNegativeYExpectRuntimeError() {\nexception.expect(RuntimeException.class);\nboard.play(1, -2);\n}\n\n@Test\npublic void whenPiecePlacedOutsideYaxisThrowRuntimeException() {\nexception.expect(RuntimeException.class);\nboard.play(2, 5);\n}\n\n@Test\npublic void whenPiecePlacedInOccupiedFieldExpectRuntimeException() {\nboard.play(1, 1);\nexception.expect(RuntimeException.class);\nboard.play(1, 1);\n}\n</code></pre>"},{"location":"aula5/#req1-green-state","title":"REQ1 - Green State","text":"<p>Implementation passing all tests and after refactoring.</p> TicTacToe.java<pre><code>    public void play(int x, int y) {\ncheckCoordinate(x);\ncheckCoordinate(y);\n\ncheckField(x, y);\n\nPiece piece = getNextPlayer();\nthis.board[x][y] = piece;\nthis.lastPlayed = piece;\nthis.filledSpaces++;\n}\n\n\nprivate void checkCoordinate(int value) {\nif (value &lt; 0 || value &gt;= SIZE) throw new RuntimeException(\"Value out of boundaries.\");\n}\n\nprivate void checkField(int x, int y) {\nif (this.board[x][y] != null)\nthrow new RuntimeException(String.format(\"Piece placed in occupied field (%d, %d).\", x, y));\n}\n</code></pre>"},{"location":"aula5/#requirement-2","title":"Requirement 2","text":"<p>There should be a way to find out which player should play next.</p>"},{"location":"aula5/#req2-red-state","title":"REQ2 - Red State","text":"<p>Tests for this requirement:</p> TicTacToeSpec.java<pre><code>    @Test\npublic void getNextPlayerAtStartShouldReturnX() {\nassertEquals(Piece.X, board.getNextPlayer());\n}\n\n@Test\npublic void getNextPlayerAfterXShouldReturnO() {\nboard.play(0, 0);\nassertEquals(Piece.O, board.getNextPlayer());\n}\n\n@Test\npublic void getNextPlayerAfterOShouldReturnX() {\nboard.play(0, 0);\nboard.play(0, 1);\nassertEquals(Piece.X, board.getNextPlayer());\n}\n</code></pre>"},{"location":"aula5/#req2-green-state","title":"REQ2 - Green State","text":"<p>Implementation passing all tests and after refactoring.</p> TicTacToe.java<pre><code>    public Piece getNextPlayer() {\nif (this.lastPlayed == null) return Piece.X;\nswitch (this.lastPlayed) {\ncase X:\nreturn Piece.O;\ncase O:\nreturn Piece.X;\ndefault:\nreturn null;\n}\n}\n</code></pre>"},{"location":"aula5/#requirement-3","title":"Requirement 3","text":"<p>A player wins by being the first to connect a line of friendly pieces from one side or corner of the board to the other.</p>"},{"location":"aula5/#req3-red-state","title":"REQ3 - Red State","text":"<p>Tests for this requirement:</p> TicTacToeSpec.java<pre><code>    @Test\npublic void assertWinnerForHorizontalLine() {\nboard.play(0, 0); // X\nboard.play(1, 2); // O\nboard.play(0, 1); // X\nboard.play(1, 1); // O\nboard.play(0, 2); // X\nboard.play(2, 1); // O\nassertEquals(Result.X_WIN, board.getWinner());\n}\n\n@Test\npublic void assertWinnerForVerticalLine() {\nboard.play(1, 0);\nboard.play(0, 0);\nboard.play(1, 2);\nboard.play(0, 1);\nboard.play(1, 1);\nboard.play(0, 2);\nassertEquals(Result.O_WIN, board.getWinner());\n}\n\n@Test\npublic void assertWinnerForPrincipalDiagonal() {\nboard.play(0, 0);\nboard.play(0, 1);\nboard.play(1, 1);\nboard.play(0, 2);\nboard.play(2, 2);\nboard.play(1, 0);\nassertEquals(Result.X_WIN, board.getWinner());\n}\n\n@Test\npublic void assertWinnerForSecondaryDiagonal() {\nboard.play(2, 0); // X\nboard.play(0, 0);\nboard.play(1, 1); // X\nboard.play(0, 1);\nboard.play(0, 2); // X\nboard.play(1, 0);\nassertEquals(Result.X_WIN, board.getWinner());\n}\n</code></pre>"},{"location":"aula5/#req3-green-state","title":"REQ3 - Green State","text":"<p>Implementation passing all tests and after refactoring.</p> TicTacToe.java<pre><code>    public Result getWinner() {\n\nPiece winner;\n\nfor (int row = 0; row &lt; SIZE; row++)\nif (this.board[row][0] == this.board[row][1] &amp;&amp; this.board[row][1] == this.board[row][2]) {\nwinner = this.board[row][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nfor (int col = 0; col &lt; SIZE; col++)\nif (this.board[0][col] == this.board[1][col] &amp;&amp; this.board[1][col] == this.board[2][col]) {\nwinner = this.board[0][col];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.board[0][0] == this.board[1][1] &amp;&amp; this.board[1][1] == this.board[2][2]) {\nwinner = this.board[0][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.board[2][0] == this.board[1][1] &amp;&amp; this.board[1][1] == this.board[0][2]) {\nwinner = this.board[2][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.filledSpaces != SIZE * SIZE)\nreturn null;\n\nreturn Result.DRAW;\n}\n\nprivate Result mapPieceToResult(Piece p) {\nif (p == null) return Result.DRAW;\nreturn p == Piece.X ? Result.X_WIN : Result.O_WIN;\n}\n</code></pre>"},{"location":"aula5/#requirement-4","title":"Requirement 4","text":"<p>The result is a draw when all the boxes are filled.</p>"},{"location":"aula5/#req4-red-state","title":"REQ4 - Red State","text":"<p>Tests for this requirement:</p> TicTacToeSpec.java<pre><code>    @Test\npublic void assertDrawBoardFilled() {\nboard.play(0, 0);\nboard.play(1, 1);\nboard.play(2, 2);\nboard.play(2, 1);\nboard.play(0, 1);\nboard.play(0, 2);\nboard.play(2, 0);\nboard.play(1, 0);\nboard.play(1, 2);\n\n\nassertEquals(Result.DRAW, board.getWinner());\n}\n\n@Test\npublic void assertWithoutResultBeforeFillingBoard() {\nboard.play(0, 0);\nassertNull(board.getWinner());\n}\n</code></pre>"},{"location":"aula5/#req4-green-state","title":"REQ4 - Green State","text":"<p>Implementation passing all tests and after refactoring.</p> TicTacToe.java<pre><code>    public Result getWinner() {\n\nPiece winner;\n\nfor (int row = 0; row &lt; SIZE; row++)\nif (this.board[row][0] == this.board[row][1] &amp;&amp; this.board[row][1] == this.board[row][2]) {\nwinner = this.board[row][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nfor (int col = 0; col &lt; SIZE; col++)\nif (this.board[0][col] == this.board[1][col] &amp;&amp; this.board[1][col] == this.board[2][col]) {\nwinner = this.board[0][col];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.board[0][0] == this.board[1][1] &amp;&amp; this.board[1][1] == this.board[2][2]) {\nwinner = this.board[0][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.board[2][0] == this.board[1][1] &amp;&amp; this.board[1][1] == this.board[0][2]) {\nwinner = this.board[2][0];\nif (winner != null) {\nreturn mapPieceToResult(winner);\n}\n}\n\nif (this.filledSpaces != SIZE * SIZE)\nreturn null;\n\nreturn Result.DRAW;\n}\n\nprivate Result mapPieceToResult(Piece p) {\nif (p == null) return Result.DRAW;\nreturn p == Piece.X ? Result.X_WIN : Result.O_WIN;\n}\n</code></pre>"},{"location":"aula5/#jacoco-report","title":"Jacoco Report","text":"<p> <p></p> <p>Results after running <code>gradle test jacocoReport</code> </p>"},{"location":"aula5/#chapter-6-mocking","title":"Chapter 6 - Mocking","text":"<p>While focused on units, we must try to remove all dependencies that a unit might use. Removal of those dependencies is accomplished through a combination of design and mocking.</p> <p>Mocks are useful in situations such as:</p> <ul> <li>Objects generating nondeterministic results, such as <code>java.util.Date</code>;</li> <li>Objects that don't already exist, such as interface elements;</li> <li>Objects with slow processing, such as databases.</li> </ul> <p>Mock objects simulate the behavior of real (often complex) objects. They allow us to create an object that will replace the real one used in the implementation code.</p> <p>The following code extracts use this structure. The Bean represents the DB's Entity.</p> TicTacToeBean.java<pre><code>public class TicTacToeBean {\n@Id\nprivate final int turn;\n\npublic int getTurn() {\nreturn turn;\n}\n\nprivate final int x;\n\npublic int getX() {\nreturn x;\n}\n\nprivate final int y;\n\npublic int getY() {\nreturn y;\n}\n\nprivate final Piece piece;\n\npublic Piece getPiece() {\nreturn piece;\n}\n\npublic TicTacToeBean(int turn, int x, int y, Piece piece) {\nthis.turn = turn;\nthis.x = x;\nthis.y = y;\nthis.piece = piece;\n}\n\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nTicTacToeBean that = (TicTacToeBean) o;\nreturn turn == that.turn &amp;&amp; x == that.x &amp;&amp; y == that.y &amp;&amp; piece == that.piece;\n}\n\n@Override\npublic int hashCode() {\nreturn Objects.hash(turn, x, y, piece);\n}\n\n@Override\npublic String toString() {\nreturn \"TicTacToeBean{\" + \"turn=\" + turn + \", x=\" + x + \", y=\" + y + \", piece=\" + piece + '}';\n}\n}\n</code></pre>"},{"location":"aula5/#requirement-1_1","title":"Requirement 1","text":"<p>Implement an option to save a single move with the turn number, the X and Y axis positions, and the player (X or O).</p>"},{"location":"aula5/#req1-red-state_1","title":"REQ1 - Red State","text":"<p>Tests for this requirement:</p> TicTacToeCollectionSpec.java<pre><code>public class TicTacToeCollectionSpec {\nTicTacToeCollection collection;\n\nMongoCollection mongoCollection;\nprivate final Piece x = Piece.X;\nprivate final Piece o = Piece.O;\n\nprivate final TicTacToeBean bean = new TicTacToeBean(1, 0, 2, x);\n\n@Before\npublic void before() {\ntry {\ncollection = spy(new TicTacToeCollection());\nmongoCollection = mock(MongoCollection.class);\n\n} catch (UnknownHostException e) {\nthrow new RuntimeException(e);\n}\n}\n\n@Test\npublic void whenInstantiatedThenMongoHasDbNameTicTacToe() {\nassertEquals(\"tic-tac-toe\", collection.getMongoCollection().getDBCollection().getDB().getName());\n}\n\n@Test\npublic void whenInstantiatedThenMongoDbHasCollectionNameGame() {\nassertEquals(\"game\", collection.getMongoCollection().getName());\n}\n\n@Test\npublic void whenSaveMoveThenInvokeMongoCollectionSave() {\nTicTacToeBean bean = new TicTacToeBean(1, 0, 2, x);\ndoReturn(mongoCollection).when(collection).getMongoCollection();\ncollection.saveMove(bean);\nverify(mongoCollection, times(1)).save(bean);\n}\n\n@Test\npublic void assertSaveMoveReturnsTrueOnSuccess() {\ndoReturn(mongoCollection).when(collection).getMongoCollection();\nassertTrue(collection.saveMove(bean));\n}\n\n@Test\npublic void assertSaveMoveReturnsFalseOnException() {\ndoThrow(new MongoException(\"Generic exception\"))\n.when(mongoCollection)\n.save(any(TicTacToeBean.class));\nassertFalse(collection.saveMove(bean));\n}\n\n@Test\npublic void testDropDatabase() {\ndoReturn(mongoCollection).when(collection).getMongoCollection();\ncollection.drop();\nverify(mongoCollection).drop();\n}\n\n@Test\npublic void assertTrueOnDrop() {\ndoReturn(mongoCollection).when(collection).getMongoCollection();\nassertTrue(collection.drop());\n}\n\n@Test\npublic void assertFalseOnExceptionDuringDrop() {\ndoThrow(new MongoException(\"Generic exception\")).when(mongoCollection).drop();\ndoReturn(mongoCollection).when(collection).getMongoCollection();\nassertFalse(collection.drop());\n}\n\n}\n</code></pre>"},{"location":"aula5/#req1-green-state_1","title":"REQ1 - Green State","text":"<p>Implementation passing all tests and after refactoring.</p> TicTacToeCollection.java<pre><code>public class TicTacToeCollection {\nprivate MongoCollection mongoCollection;\n\nprotected MongoCollection getMongoCollection() {\nreturn mongoCollection;\n}\n\npublic TicTacToeCollection() throws UnknownHostException {\nDB db = new MongoClient().getDB(\"tic-tac-toe\");\nmongoCollection = new Jongo(db).getCollection(\"game\");\n\n}\n\npublic boolean saveMove(TicTacToeBean move) {\ntry {\ngetMongoCollection().save(move);\nreturn true;\n} catch (Exception e) {\nreturn false;\n}\n}\n\npublic boolean drop() {\ntry {\ngetMongoCollection().drop();\nreturn true;\n} catch (Exception e) {\nreturn false;\n}\n}\n\n}\n</code></pre>"},{"location":"aula5/#references","title":"References","text":"<p>[1] Test-Driven Java Development, Second Edition: Invoke TDD Principles for End-To-end Application Development, 2nd Edition, by Viktor Farcic, and Alex Garcia.</p>"},{"location":"aula6/","title":"DevSecOps","text":""},{"location":"aula6/#higher-order-testing","title":"Higher-Order Testing","text":"<ul> <li>Module-testing n\u00e3o \u00e9 o fim do processo de testes;</li> <li>Erros ocorrem quando o software n\u00e3o faz o que o usu\u00e1rio final espera;</li> <li> <p>Testes adicionais, conhecidos por higher-order tests, s\u00e3o necess\u00e1rios para completar o processo de teste.</p> </li> <li> <p>Cria\u00e7\u00e3o de software envolve a tradu\u00e7\u00e3o de informa\u00e7\u00f5es sobre o programa do n\u00edvel conceitual ao concreto;</p> </li> <li>Muitos erros ocorrem por ru\u00eddos e erros durante essa tradu\u00e7\u00e3o.</li> <li>O processo de desenvolvimento de software envolve diversos passos, e \u00e9 poss\u00edvel realizar testes em cada um deles.</li> </ul> <p> <p>Rela\u00e7\u00e3o entre os n\u00edveis de teste e as etapas do processo de desenvolvimento.(Fonte: [1])</p> <p></p>"},{"location":"aula6/#testes-de-aceitacao","title":"Testes de Aceita\u00e7\u00e3o","text":"<ul> <li>Testes de aceita\u00e7\u00e3o comparam o programa com os seus requisitos iniciais e as necessidades atuais dos seus usu\u00e1rios finais.</li> <li>S\u00e3o realizados, tipicamente, pelo cliente ou usu\u00e1rio final, e n\u00e3o pela organiza\u00e7\u00e3o que desenvolveu o programa.</li> <li>Quando existe um contrato, o programa \u00e9 comparado com o contrato original.</li> <li>Embora a responsabilidade dos testes de aceita\u00e7\u00e3o seja do usu\u00e1rio final, o desenvolvedor pode conduzir os testes de usu\u00e1rio durante o ciclo de desenvolvimento para identificar e resolver problemas antes de entregar a vers\u00e3o final ao usu\u00e1rio.</li> </ul>"},{"location":"aula6/#testes-de-sistema","title":"Testes de Sistema","text":"<ul> <li>Visa identificar discrep\u00e2ncias no sistema em rela\u00e7\u00e3o aos seus objetivos originais. Ou seja, \u00e9 focado em demonstrar como o programa, como um todo, falha em atender os objetivos originais.</li> <li>Para realiza\u00e7\u00e3o de testes de sistema, \u00e9 essencial que o produto possua objetivos mensur\u00e1veis e registrados.</li> <li>Durante essa etapa \u00e9 importante identificar erros de tradu\u00e7\u00e3o durante a cria\u00e7\u00e3o da especifica\u00e7\u00e3o externa.</li> <li>Os casos de teste n\u00e3o s\u00e3o derivados da especifica\u00e7\u00e3o externa, mas sim da an\u00e1lise da documenta\u00e7\u00e3o do usu\u00e1rio.</li> <li>A cria\u00e7\u00e3o dos casos de teste n\u00e3o \u00e9 trivial e n\u00e3o h\u00e1 um conjunto de metodologias, como nos testes funcionais, sendo uma atividade que exige criatividade, intelig\u00eancia e experi\u00eancia do testador.</li> <li>As 15 categorias de teste da tabela a seguir podem aparecer nos testes de sistema, e recomenda-se a utiliza\u00e7\u00e3o da maior quantidade poss\u00edvel.</li> </ul> Categoria Descri\u00e7\u00e3o Funcionalidade Garantir que a funcionalidade descrita nos objetivos esteja implementada. Volume Submeter o programa a volumes anormalmente grandes de dados para processamento. Estresse Submeter o programa a cargas anormalmente grandes, geralmente processamento paralelo. Usabilidade Avaliar o qu\u00e3o bem o usu\u00e1rio final consegue interagir com o programa. Seguran\u00e7a Tentar subverter as medidas de seguran\u00e7a do programa. Desempenho Verificar se o programa atende aos requisitos de tempo de resposta e taxa de transfer\u00eancia. Armazenamento Assegurar que o programa gerencie corretamente suas necessidades de armazenamento (sistema e f\u00edsico). Configura\u00e7\u00e3o Verificar se o programa funciona adequadamente nas configura\u00e7\u00f5es recomendadas. Compatibilidade Avaliar se as novas vers\u00f5es do programa s\u00e3o compat\u00edveis com vers\u00f5es anteriores. Instala\u00e7\u00e3o Garantir que os m\u00e9todos de instala\u00e7\u00e3o funcionem em todas as plataformas suportadas. Confiabilidade Verificar se o programa atende \u00e0s especifica\u00e7\u00f5es de confiabilidade, ex: tempo de atividade e MTBF (mean time between failures). Recupera\u00e7\u00e3o Testar se as facilidades de recupera\u00e7\u00e3o do sistema funcionam conforme o projetado. Manutenibilidade Avaliar se o aplicativo fornece corretamente mecanismos para obter dados sobre eventos que requerem suporte t\u00e9cnico. Documenta\u00e7\u00e3o Validar a precis\u00e3o de toda a documenta\u00e7\u00e3o do usu\u00e1rio. Procedimento Verificar a precis\u00e3o de procedimentos especiais necess\u00e1rios para usar ou manter o programa."},{"location":"aula6/#testes-funcionais","title":"Testes Funcionais","text":"<ul> <li>Visa identificar discrep\u00e2ncias entre o programa e a sua especifica\u00e7\u00e3o externa (descri\u00e7\u00e3o do comportamento do programa do ponto de vista do usu\u00e1rio final).</li> <li>Primariamente uma atividade de caixa-preta, mas que utiliza crit\u00e9rios caixa-branca de cobertura de l\u00f3gica.</li> <li>Os casos de teste s\u00e3o derivados da especifica\u00e7\u00e3o.</li> <li>M\u00e9todos como particionamento em equival\u00eancias, an\u00e1lise do valor limite, grafos de causa-efeito e error-guessing s\u00e3o relevantes durante testes funcionais.</li> <li>\u00c9 importante registrar fun\u00e7\u00f5es que apresentam a maior quantidade de erros, pelo fator da localidade dos erros.</li> </ul>"},{"location":"aula6/#teste-de-instalacao","title":"Teste de Instala\u00e7\u00e3o","text":"<ul> <li>Visa identificar erros durante o processo de instala\u00e7\u00e3o, como por exemplo erros nas sele\u00e7\u00f5es do usu\u00e1rio, aloca\u00e7\u00e3o de arquivos, carregamento, requisitos de hardware e conectividade.</li> <li>A organiza\u00e7\u00e3o desenvolvimento o sistema \u00e9 respons\u00e1vel por estes testes, devendo cri\u00e1-los e inclu\u00ed-los como parte do sistema.</li> <li>Os casos de teste devem verificar compatibilidade, componentes do sistema, integridade de arquivos e configura\u00e7\u00e3o adequada de hardware.</li> </ul>"},{"location":"trabalho/relatorio_2/","title":"Testes Funcionais/Sistema Caixa-Preta","text":"FGA 0238 Testes de Software - Turma 02  Semestre  2023.1  Nome  Nicolas Chagas Souza                 Matr\u00edcula  20/0042327  Equipe PassaNada <p> <p> Atividade 2 \u2013 Desenvolver Testes Funcionais/Sistema Caixa-Preta </p> <p></p>"},{"location":"trabalho/relatorio_2/#aplicacao","title":"Aplica\u00e7\u00e3o","text":"<p>A aplica\u00e7\u00e3o em teste \u00e9 o TEAMMATES, que fornece funcionalidades para avalia\u00e7\u00e3o entre pares. Para utilizar o sistema, um instrutor deve solicitar uma conta na plataforma, em seguida, ele pode criar cursos, inscrever alunos nesses cursos, separados por grupos, e gerar sess\u00f5es de avalia\u00e7\u00f5es por pares, onde cada integrante avalia a si mesmo e aos demais integrantes do grupo, por meio de quest\u00f5es definidas pelo instrutor.</p>"},{"location":"trabalho/relatorio_2/#especificacao-da-funcionalidade","title":"Especifica\u00e7\u00e3o da Funcionalidade","text":""},{"location":"trabalho/relatorio_2/#requisitos","title":"Requisitos","text":"<p>A funcionalidade testada \u00e9 a de Criar Novos Cursos. Um instrutor pode criar zero ou mais cursos, cada qual com as seguintes informa\u00e7\u00f5es:</p> <ul> <li>Identifica\u00e7\u00e3o do Curso (obrigat\u00f3rio): Identificador do curso, na forma de texto, pode conter letras, n\u00fameros, pontos finais, h\u00edfenes, underlines e cifr\u00f5es ($). N\u00e3o pode se repetir, n\u00e3o pode ser maior do que 64 caracteres, n\u00e3o pode estar vazio, n\u00e3o pode conter espa\u00e7os, deve possuir ao menos um s\u00edmbolo alfanum\u00e9rico.</li> <li>Nome do Curso (obrigat\u00f3rio): Deve come\u00e7ar com um caractere alfanum\u00e9rico, possuir no m\u00e1ximo 80 caracteres, n\u00e3o pode conter barras verticais (|) ou s\u00edmbolos de porcentagem (%).</li> <li>Institui\u00e7\u00e3o do Curso (obrigat\u00f3rio): Deve ser uma das institui\u00e7\u00f5es do instrutor.</li> <li>Fuso Hor\u00e1rio (obrigat\u00f3rio): Deve ser um fuso hor\u00e1rio v\u00e1lido.</li> </ul>"},{"location":"trabalho/relatorio_2/#capturas-de-tela","title":"Capturas de Tela","text":"<p> <p>  Tela de listagem de cursos, sem nenhum curso cadastrado al\u00e9m dos default. </p> <p> <p>  Tela cria\u00e7\u00e3o de curso, com campos preenchidos. </p> <p> <p> Mensagem de sucesso para curso criado. </p>"},{"location":"trabalho/relatorio_2/#condicoes-de-entrada-e-de-saida","title":"Condi\u00e7\u00f5es de Entrada e de Sa\u00edda","text":""},{"location":"trabalho/relatorio_2/#classes-de-equivalencia","title":"Classes de Equival\u00eancia","text":"<p>A partir da especifica\u00e7\u00e3o da funcionalidade foram identificadas as seguintes classes de equival\u00eancia.</p>  Vari\u00e1vel   Classes V\u00e1lidas  Classes Inv\u00e1lidas   Course ID    Cont\u00e9m 1 ou mais letras  Cont\u00e9m 1 ou mais n\u00fameros  Cont\u00e9m 1 ou mais '.' (ponto final)  Cont\u00e9m 1 ou mais '-' (h\u00edfen)  Cont\u00e9m 1 ou mais '_' (underline)  Cont\u00e9m 1 ou mais '$' (cifr\u00e3o)  0 &lt; tamanho &lt; 65      Cont\u00e9m 1 ou mais s\u00edmbolos alfanum\u00e9ricos   N\u00e3o se repete   tamanho = 0  tamanho &gt;= 65  Cont\u00e9m 1 ou mais ' ' (espa\u00e7os)   N\u00e3o cont\u00e9m s\u00edmbolos alfanum\u00e9ricos   Se repete  Course name        O primeiro caractere \u00e9 alfanum\u00e9rico  0 &lt; tamanho &lt; 81   Cont\u00e9m 1 ou mais caracteres especiais dentre: '@', '#', '$', '&amp;', '*', '(', ')', '+', '\\', '/', '?', '!', '[', ']', '{', '}', '-', '_', '\u00aa', '\u00ba', \"'\", '\"'   Cont\u00e9m 1 ou mais '|' (barra vertical)  Cont\u00e9m 1 ou mais '%' (porcentagem)  tamanho = 0  tamanho &gt;= 81  Primeiro caractere n\u00e3o alfanum\u00e9rico  Course Institute   \u00c9 uma institui\u00e7\u00e3o cadastrada no sistema   \u00c9 uma das institui\u00e7\u00f5es do instrutor   \u00c9 uma institui\u00e7\u00e3o n\u00e3o cadastrada no sistema   \u00c9 uma institui\u00e7\u00e3o \u00e0 qual o instrutor n\u00e3o pertence   Time Zone   \u00c9 um fuso hor\u00e1rio v\u00e1lido dentre os 24 existentes.   Qualquer outro valor  <p>Legenda:</p> <p>numera\u00e7\u00e3o das classes v\u00e1lidas:  numera\u00e7\u00e3o das classes inv\u00e1lidas: </p>"},{"location":"trabalho/relatorio_2/#analise-de-valor-limite","title":"An\u00e1lise de Valor Limite","text":"<p>A t\u00e9cnica de An\u00e1lise de Valor Limite foi aplicada para determinar os limites v\u00e1lidos e inv\u00e1lidos para os intervalos num\u00e9ricos, no caso o tamanho dos identificadores e nomes dos cursos.</p> Vari\u00e1vel Limite Inferior Inv\u00e1lido Limite Inferior V\u00e1lido Limite Superior V\u00e1lido Limite Superior Inv\u00e1lido Course ID (tamanho) 0 1 64 65 Course name (tamanho) 0 1 80 81"},{"location":"trabalho/relatorio_2/#especificacao-dos-casos-de-teste","title":"Especifica\u00e7\u00e3o dos Casos de Teste","text":"<p>Todos os casos de teste levam em considera\u00e7\u00e3o um instrutor cadastrado nas institui\u00e7\u00f5es 'UnB e FGA' com o curso com ID \"TESTE\" j\u00e1 cadastrado. No sistema est\u00e1 cadastrada, para outro instrutor, a institui\u00e7\u00e3o Anhanguera.</p>  Casos de Teste  Classes Contempladas   Dados de Entrada   Sa\u00edda Esperada Course ID Course Name  Course Institute Timezone  Testes-De-Software_T02-2023-Universidade.De.Brasilia$2023--01-TM (64 caracteres)   abcd efghijklm nopqrstuvwxy zABCDEFGHIJKLMNOPQRSTUVWXYZ@\\#$&amp;*()+\\/?![]{}-_ \u00aa\u00ba\"\"''  (80 caracteres)   UnB   America/Sao_Paulo (UTC -3)   Curso criado.   (0 caracteres)   Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   Testes-De-Software_T02-2023-Universidade.De.Bras\u00edlia$2023--01-TMS (65 caracteres)   Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   Testes deSoftware  Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   $_-.   Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TESTE   Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   Curso d|e Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   Curso d%e Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   (0 caracteres)   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   abcd efghijklm nopqrstuvwxy zABCDEFGHIJKLMNOPQRSTUVWXYdZ@\\#$&amp;*()+\\/?![]{}-_ \u00aa\u00ba\"\"''  (81 caracteres)   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   @Curso de Teste   UnB   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   Curso de Teste   Cat\u00f3lica   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   Curso de Teste   FGA   America/Sao_Paulo (UTC -3)   Curso n\u00e3o criado.   TestesDeSoftware   Curso de Teste   UnB   X   Curso n\u00e3o criado."},{"location":"trabalho/relatorio_2/#execucao-dos-testes","title":"Execu\u00e7\u00e3o dos Testes","text":""},{"location":"trabalho/relatorio_2/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":"<p>Inicialmente foram criados dois instrutores, de forma a ter mais de uma institui\u00e7\u00e3o cadastrada, e um curso com ID \"TESTE\" para um deles.</p> <p> <p></p> <p>Instrutores criados. </p> <p> <p> Curso TESTE criado. </p>"},{"location":"trabalho/relatorio_2/#testes-executados","title":"Testes Executados","text":"<p> <p> Dados preenchidos. </p> <p> <p> Mensagem de sucesso e curso listado. <p> Captura de tela: . <p> A valida\u00e7\u00e3o do frontend n\u00e3o permite textos maiores do que 64 caracteres.  <p> Captura de tela: . <p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> A valida\u00e7\u00e3o do frontend n\u00e3o permite textos maiores do que 81 caracteres.</p> <p> Captura de tela: . <p> <p> Captura de tela: . <p> A valida\u00e7\u00e3o do frontend n\u00e3o permite a escolha de outras institui\u00e7\u00f5es. <p> <p> Captura de tela:  e . <p> A valida\u00e7\u00e3o do frontend n\u00e3o permite a escolha de outros fuso hor\u00e1rios. <p> <p> Captura de tela: ."},{"location":"trabalho/relatorio_2/#resultados","title":"Resultados","text":"Caso de Teste Resultado A Sucesso B Sucesso C Sucesso D Sucesso E Falha F Sucesso G Sucesso H Sucesso I Sucesso J Sucesso L Sucesso M Sucesso N Sucesso <p>No caso de teste E esperava-se que o curso n\u00e3o fosse cadastrado, houve falha no teste j\u00e1 que o curso foi cadastrado.</p>"},{"location":"trabalho/relatorio_2/#resumo","title":"Resumo","text":"Testes executados Testes com sucesso Taxa de sucesso 14 13 92,85%"},{"location":"trabalho/relatorio_2/#falhas-identificadas","title":"Falhas Identificadas","text":"<p>Durante a execu\u00e7\u00e3o dos testes a \u00fanica falha encontrada foi no caso de teste E, quando foi permitido cadastrar um curso sem caracteres alfanum\u00e9ricos em seu ID. Portanto, o resultado esperado foi encontrado em 13 dos 14 testes, um total de 92,85% dos testes. Durante a execu\u00e7\u00e3o dos casos de teste tamb\u00e9m foi identificada uma funcionalidade ainda n\u00e3o presente no sistema, o cadastro de palavras acentuadas, mas levando em considera\u00e7\u00e3o que o idioma do sistema \u00e9 ingl\u00eas, essa funcionalidade n\u00e3o foi testada e n\u00e3o se mostra necess\u00e1ria.</p>"},{"location":"trabalho/relatorio_2/#conclusao","title":"Conclus\u00e3o","text":"<p>Os casos de teste apontaram que as valida\u00e7\u00f5es para os valores inseridos no cadastro de um curso funcionam adequadamente. A documenta\u00e7\u00e3o dos requisitos do sistema n\u00e3o \u00e9 clara em rela\u00e7\u00e3o aos dom\u00ednios de valores aceitos, portanto para a deriva\u00e7\u00e3o dos casos de uso foram levados em considera\u00e7\u00e3o as restri\u00e7\u00f5es expressas nas mensagens de erro e o senso comum.</p>"},{"location":"trabalho/relatorio_3/","title":"Testes de Unidade","text":"FGA 0238 Testes de Software - Turma 02  Semestre  2023.1  Nome  Nicolas Chagas Souza                 Matr\u00edcula  20/0042327  Equipe PassaNada <p> <p> Atividade 3 \u2013 Desenvolver Testes de Unidade </p> <p></p>"},{"location":"trabalho/relatorio_3/#identificacao-do-projeto","title":"Identifica\u00e7\u00e3o do Projeto","text":"<p>A aplica\u00e7\u00e3o em teste \u00e9 o TEAMMATES, que fornece funcionalidades para avalia\u00e7\u00e3o entre pares. Para utilizar o sistema, um instrutor deve solicitar uma conta na plataforma, em seguida, ele pode criar cursos, inscrever alunos nesses cursos, separados por grupos, e gerar sess\u00f5es de avalia\u00e7\u00f5es por pares, onde cada integrante avalia a si mesmo e aos demais integrantes do grupo, por meio de quest\u00f5es definidas pelo instrutor.</p> <p>O fork utilizado est\u00e1 dispon\u00edvel no link.</p>"},{"location":"trabalho/relatorio_3/#cobertura-de-testes","title":"Cobertura de Testes","text":"<p>A execu\u00e7\u00e3o dos testes de backend gerou o relat\u00f3rio representado nas figuras seguintes.</p> <p> <p> Relat\u00f3rio geral dos testes. </p> <p> <p> Relat\u00f3rio das classes do pacote util. </p> <p> <p> Relat\u00f3rio dos m\u00e9todos da classe TimeHelper. </p> <p> <p> Cobertura do m\u00e9todo testado antes da cria\u00e7\u00e3o dos testes unit\u00e1rios. </p>"},{"location":"trabalho/relatorio_3/#metodo-testado","title":"M\u00e9todo testado","text":"<p>O m\u00e9todo escolhido para teste foi o <code>getMidnightAdjustedInstanteBaseOnZone</code> da classe <code>teammates.common.util.TimeHelper</code>.</p> teammates.common.util.TimeHelper.java<pre><code>/**\n     * Gets an Instant which is adjusted for midnight time (23:59 and 00:00) at the specified time zone.\n     * The direction of adjustment (23:59 to 00:00 or vice versa) is determined by {@code isForward} parameter.\n*/\npublic static Instant getMidnightAdjustedInstantBasedOnZone(Instant instant, String timeZone, boolean isForward) {\nif (isSpecialTime(instant)) {\nreturn instant;\n}\nZonedDateTime zonedDateTime = instant.atZone(ZoneId.of(timeZone));\nif (isForward &amp;&amp; zonedDateTime.getHour() == 23 &amp;&amp; zonedDateTime.getMinute() == 59) {\nzonedDateTime = zonedDateTime.plusMinutes(1L);\n} else if (!isForward &amp;&amp; zonedDateTime.getHour() == 0 &amp;&amp; zonedDateTime.getMinute() == 0) {\nzonedDateTime = zonedDateTime.minusMinutes(1L);\n}\nreturn zonedDateTime.toInstant();\n}\n</code></pre>"},{"location":"trabalho/relatorio_3/#classe-de-testes","title":"Classe de Testes","text":"<p>Antes da incrementa\u00e7\u00e3o dos testes existentes, o m\u00e9todo de teste da classe estava no seguinte estado:</p> teammates.common.util.TimeHelperTest.java<pre><code>    @Test\npublic void testGetMidnightAdjustedInstantBasedOnZone() {\nString zoneId = \"UTC\";\nInstant instantAt0000 = LocalDateTime.of(2015, Month.NOVEMBER, 30, 0, 0).atZone(ZoneId.of(zoneId)).toInstant();\n\nInstant backwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0000, zoneId, false);\nassertEquals(\"Sun, 29 Nov 2015, 11:59 PM UTC\",\nTimeHelper.formatInstant(backwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n\nInstant forwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0000, zoneId, true);\nassertEquals(\"Mon, 30 Nov 2015, 12:00 AM UTC\",\nTimeHelper.formatInstant(forwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n\nInstant instantAt2359 = LocalDateTime.of(2015, Month.NOVEMBER, 29, 23, 59).atZone(ZoneId.of(zoneId)).toInstant();\n\nbackwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2359, zoneId, false);\nassertEquals(\"Sun, 29 Nov 2015, 11:59 PM UTC\",\nTimeHelper.formatInstant(backwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n\nforwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2359, zoneId, true);\nassertEquals(\"Mon, 30 Nov 2015, 12:00 AM UTC\",\nTimeHelper.formatInstant(forwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n\nString wrongTimeZone = \"Asia/Singapore\";\n\nbackwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0000, wrongTimeZone, false);\nassertEquals(\"Mon, 30 Nov 2015, 12:00 AM UTC\",\nTimeHelper.formatInstant(backwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n\nforwardAdjusted = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2359, wrongTimeZone, true);\nassertEquals(\"Sun, 29 Nov 2015, 11:59 PM UTC\",\nTimeHelper.formatInstant(forwardAdjusted, zoneId, DATETIME_DISPLAY_FORMAT));\n}\n</code></pre>"},{"location":"trabalho/relatorio_3/#tabela-de-decisoescondicoes","title":"Tabela de decis\u00f5es/condi\u00e7\u00f5es","text":"Decis\u00e3o Situa\u00e7\u00e3o para <code>true</code> Situa\u00e7\u00e3o para <code>false</code> 3 O <code>instant</code> \u00e9 um entre: <code>Const.TIME_REPRESENTS_FOLLOW_OPENING</code><code>Const.TIME_REPRESENTS_FOLLOW_VISIBLE</code><code>Const.TIME_REPRESENTS_LATER</code><code>Const.TIME_REPRESENTS_NOW</code> O <code>instant</code> n\u00e3o \u00e9 uma dessas constantes. 7 A formata\u00e7\u00e3o do tempo \u00e9 para frente (<code>isForward == true</code>) e o hor\u00e1rio \u00e9 23:59 A formata\u00e7\u00e3o do tempo n\u00e3o \u00e9 para frente (<code>isForward == false</code>) ou o hor\u00e1rio \u00e9 diferente de 23:59. 9 A formata\u00e7\u00e3o do tempo n\u00e3o \u00e9 para frente (<code>isForward == false</code>) e o hor\u00e1rio \u00e9 00:00 A formata\u00e7\u00e3o do tempo \u00e9 para frente (<code>isForward == true</code>) ou o hor\u00e1rio \u00e9 diferente de 00:00. <p> Identifica\u00e7\u00e3o das decis\u00f5es. </p> Decis\u00e3o Condi\u00e7\u00e3o Situa\u00e7\u00e3o para <code>true</code> Situa\u00e7\u00e3o para <code>false</code> 3 <code>isSpecialTime(instant)</code> <code>instant</code> \u00e9 um entre: <code>Const.TIME_REPRESENTS_FOLLOW_OPENING</code><code>Const.TIME_REPRESENTS_FOLLOW_VISIBLE</code><code>Const.TIME_REPRESENTS_LATER</code><code>Const.TIME_REPRESENTS_NOW</code> <code>instant</code> \u00e9 diferente desses.   7A <code>isForward</code> <code>isForward==true</code> <code>isForward==false</code> 7B <code>zonedDateTime.getHour() == 23</code> O <code>instant</code> est\u00e1 entre <code>23:00</code> e <code>23:59</code>.   O <code>instant</code> est\u00e1 fora do intervalo de <code>23:00</code> \u00e0 <code>23:59</code>.   7C <code>zonedDateTime.getMinute() == 59</code> O <code>instant</code> \u00e9 do tipo <code>hh:59</code>, com hh entre 0 e 23.   O <code>instant</code> \u00e9 do tipo <code>hh:mm</code>, com <code>mm != 59</code>.   9A <code>!isForward</code> <code>isForward==false</code> <code>isForward==true</code> 9B <code>zonedDateTime.getHour() == 0</code> O <code>instant</code> est\u00e1 entre <code>00:00</code> e <code>00:59</code>.   O <code>instant</code> est\u00e1 fora do intervalo de <code>00:00</code> \u00e0 <code>00:59</code>.   9C <code>zonedDateTime.getMinute() == 0</code> O <code>instant</code> \u00e9 do tipo <code>hh:00</code>, com hh entre 0 e 23.   O <code>instant</code> \u00e9 do tipo <code>hh:mm</code>, com <code>mm != 00</code>.  <p>Identifica\u00e7\u00e3o das condi\u00e7\u00f5es.</p>"},{"location":"trabalho/relatorio_3/#especificacao-dos-casos-de-teste","title":"Especifica\u00e7\u00e3o dos Casos de Teste","text":"<p>A t\u00e9cnica das combina\u00e7\u00f5es m\u00faltiplas foi utilizadas para a determina\u00e7\u00e3o dos casos de teste, representados na tabela a seguir. Observe que 7A e 9A s\u00e3o opostas, ent\u00e3o n\u00e3o \u00e9 poss\u00edvel 7A == 9A. As condi\u00e7\u00f5es 7B e 9B s\u00e3o incompat\u00edveis, ent\u00e3o n\u00e3o \u00e9 poss\u00edvel ter 7B == 9B. As condi\u00e7\u00f5es 7C e 9C s\u00e3o incompat\u00edveis, ent\u00e3o n\u00e3o \u00e9 poss\u00edvel ter 7C == 9B. Como todas as constantes especiais de tempo possuem hor\u00e1rio <code>00:00</code>, a condi\u00e7\u00e3o 3 ser verdadeira implica em 9B e 9C verdadeiros e 7B e 7C falsos. Levando em considera\u00e7\u00e3o esses fatores, as combina\u00e7\u00f5es poss\u00edveis entre as decis\u00f5es 7A, 7B e 7C e as decis\u00f5es 9A, 9B e 9C foram representadas na tabela a seguir.</p> N\u00famero da combina\u00e7\u00e3o 3 7A 7B 7C 9A 9B 9C Caso de Teste #1 X 3 #2 4 #3 5 #4 2 #5 X 1 #6 6 #7 7 #8 8 <p> Combina\u00e7\u00f5es entre as condi\u00e7\u00f5es. </p> <p>X denota o 'don't care'.</p>  N\u00famero   Condi\u00e7\u00f5es    Condi\u00e7\u00e3o de Entrada   Combina\u00e7\u00f5es    Sa\u00edda Esperada   <code>instant</code> <code>timeZone</code> <code>isForward</code>  | 3 | 7A | 7B | 7C | 9A | 9B | 9C |  1 1, 3, 6, 8, 10, 11, 13  <code>TIME_REPRESENTS_FOLLOW_OPENING\u00b9</code> GMT-3 true  |   |   |   |   |   |   |   |  TIME_REPRESENTES_FOLLOW_OPENING 2 2, 4, 5, 7, 9, 12, 14 2023-05-31 23:59:00 GMT-3 false  |  |  |  |  |  |  |  | 2023-05-31 23:59:00 3 - 2023-05-31 00:00:00 GMT-3 false |  |  |  |  |  |  |  | 2023-05-30 23:59:00 4 - 2023-05-31 00:59:00 GMT-3 false |  |  |  |  |  |  |  | 2023-05-31 00:59:00 5 - 2023-05-31 23:00:00 GMT-3 false |  |  |  |  |  |  |  | 2023-05-31 23:00:00 6 - 2023-05-31 00:59:00 GMT-3 true |  |  |  |  |  |  |  | 2023-05-31 00:59:00 7 - 2023-05-31 23:00:00 GMT-3 true |  |  |  |  |  |  | |  2023-05-31 23:00:00 8 - 2023-05-31 23:59:00 GMT-3 true |  |   |   |   |   |   |   | 2023-06-01 00:00:00 <p>\u00b9<code>Const.TIME_REPRESENTS_FOLLOW_OPENING = TimeHelper.parseInstant(\"1970-12-31 00:00:00Z\")</code> como o hor\u00e1rio dessa constante \u00e9 0:00, ela j\u00e1 satisfaz as condi\u00e7\u00f5es 11 e 13.</p>"},{"location":"trabalho/relatorio_3/#implementacao-dos-casos-de-teste","title":"Implementa\u00e7\u00e3o dos Casos de Teste","text":"TimeHelperTest.java<pre><code>    // Test Case #1\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithProjectsTimeConstantShouldReturnSameConstant() {\nString timeZone = \"GMT-3\";\nInstant constantInput = Const.TIME_REPRESENTS_FOLLOW_OPENING;\nassertNotNull(constantInput);\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(constantInput, timeZone, true);\nassertEquals(constantInput, adjustedTime);\n}\n\n// Test Case #2\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime2359notForwardFalseShouldReturnSameInstant() {\nString timeZone = \"GMT-3\";\nInstant instantAt2359 = LocalDateTime.of(2023, Month.MAY, 31, 23, 59).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2359, timeZone, false);\nassertEquals(instantAt2359, adjustedTime);\n}\n\n// Test Case #3\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime0000notForwardShouldReturnPreviousDayAt2359() {\nString timeZone = \"GMT-3\";\nInstant instantAt0000 = LocalDateTime.of(2023, Month.MAY, 31, 0, 0).atZone(ZoneId.of(timeZone)).toInstant();\nInstant previousDayAt2359 = LocalDateTime.of(2023, Month.MAY, 30, 23, 59).atZone(ZoneId.of(timeZone))\n.toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0000, timeZone, false);\nassertEquals(previousDayAt2359, adjustedTime);\n}\n\n// Test Case #4\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime0059notForwardShouldReturnSameInstant() {\nString timeZone = \"GMT-3\";\nInstant instantAt0059 = LocalDateTime.of(2023, Month.MAY, 31, 0, 59).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0059, timeZone, false);\nassertEquals(instantAt0059, adjustedTime);\n}\n\n// Test Case #5\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime2300notForwardShouldReturnSameInstant() {\nString timeZone = \"GMT-3\";\nInstant instantAt2300 = LocalDateTime.of(2023, Month.MAY, 31, 23, 0).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2300, timeZone, false);\nassertEquals(instantAt2300, adjustedTime);\n}\n\n// Test Case #6\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime0059andForwardShouldReturnSameInstant() {\nString timeZone = \"GMT-3\";\nInstant instantAt0059 = LocalDateTime.of(2023, Month.MAY, 31, 0, 59).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt0059, timeZone, true);\nassertEquals(instantAt0059, adjustedTime);\n}\n\n// Test Case #7\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime2300andForwardShouldReturnSameInstant() {\nString timeZone = \"GMT-3\";\nInstant instantAt2300 = LocalDateTime.of(2023, Month.MAY, 31, 23, 0).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2300, timeZone, true);\nassertEquals(instantAt2300, adjustedTime);\n}\n\n// Test Case #8\n@Test\npublic void testGetMidnightAdjustedInstantBasedOnZoneWithTime2359andForwardShouldReturnNextDayAt0000() {\nString timeZone = \"GMT-3\";\nInstant instantAt2359 = LocalDateTime.of(2023, Month.MAY, 31, 23, 59).atZone(ZoneId.of(timeZone)).toInstant();\nInstant nextDayAt0000 = LocalDateTime.of(2023, Month.JUNE, 1, 0, 0).atZone(ZoneId.of(timeZone)).toInstant();\nInstant adjustedTime = TimeHelper.getMidnightAdjustedInstantBasedOnZone(instantAt2359, timeZone, true);\nassertEquals(nextDayAt0000, adjustedTime);\n\n}\n</code></pre>"},{"location":"trabalho/relatorio_3/#analise-e-resultados","title":"An\u00e1lise e Resultados","text":"<p>Ap\u00f3s a execu\u00e7\u00e3o dos testes da classe TimeHelperTest.java o seguinte resultado foi obtido na console.</p> <pre><code>&gt; Task :compileJava UP-TO-DATE\n&gt; Task :processResources UP-TO-DATE\n&gt; Task :classes UP-TO-DATE\n&gt; Task :compileTestJava UP-TO-DATE\n&gt; Task :processTestResources UP-TO-DATE\n&gt; Task :testClasses UP-TO-DATE\n&gt; Task :componentTests\nJun 19, 2023 7:53:04 PM teammates.common.util.Logger info\nINFO: teammates.logic.core.LogicStarter:initializeDependencies:43: Initialized dependencies between logic classes\n[=============================teammates.common.util.TimeHelperTest=============================]\nteammates.common.util.TimeHelperTest completed\nJun 19, 2023 7:53:04 PM com.google.cloud.testing.BlockingProcessStreamReader writeLog\nINFO: [datastore] Adding handler(s) to newly registered Channel.\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testEndOfYearDates PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testFormatDateTimeForDisplay PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testGetInstantDaysOffsetBeforeNow PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testGetInstantDaysOffsetFromNow PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testGetInstantHoursOffsetFromNow PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testGetInstantNearestHourBefore PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; testGetMidnightAdjustedInstantBasedOnZone PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithProjectsTimeConstantShouldReturnSameConstant PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime0000notForwardShouldReturnPreviousDayAt2359 PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime0059andForwardShouldReturnSameInstant PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime0059notForwardShouldReturnSameInstant PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime2300andForwardShouldReturnSameInstant PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime2300notForwardShouldReturnSameInstant PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime2359andForwardShouldReturnNextDayAt0000 PASSED\ncomponent-tests &gt; component-tests &gt; teammates.common.util.TimeHelperTest &gt; \ntestGetMidnightAdjustedInstantBasedOnZoneWithTime2359notForwardFalseShouldReturnSameInstant PASSED\n</code></pre> <p>Nenhuma falha foi identificada na funcionalidade por meio dos testes realizados, uma vez que todos passaram com sucesso. A cria\u00e7\u00e3o dos testes aumentou a cobertura de testes do m\u00e9todo, conforme ilustrado na figura a seguir.</p> <p> <p> Cobertura de testes depois da adi\u00e7\u00e3o dos novos testes. </p> <p> <p> Cobertura de testes depois da adi\u00e7\u00e3o dos novos testes. </p>"},{"location":"trabalho/relatorio_3/#pull-request","title":"Pull Request","text":"<p> <p> Screenshot do Pull Request. </p>"},{"location":"trabalho/relatorio_3/#links","title":"Links","text":"Descri\u00e7\u00e3o URL Fork do projeto https://github.com/nszchagas/teammates Implementa\u00e7\u00e3o no projeto https://github.com/nszchagas/teammates/blob/master/src/test/java/teammates/common/util/TimeHelperTest.java Commit da implementa\u00e7\u00e3o https://github.com/nszchagas/teammates/commit/994a659202bcf2e25adad1450b5a0658eada7510 Pull Request https://github.com/TEAMMATES/teammates/pull/12486"},{"location":"trabalho/relatorio_4/","title":"TDD","text":"FGA 0238 Testes de Software - Turma 02  Semestre  2023.1  Nome  Nicolas Chagas Souza                 Matr\u00edcula  20/0042327  Equipe PassaNada <p> Atividade 4 \u2013 TDD </p>"},{"location":"trabalho/relatorio_4/#atividade-4-tdd","title":"Atividade 4 - TDD","text":""},{"location":"trabalho/relatorio_4/#funcionalidade","title":"Funcionalidade","text":""},{"location":"trabalho/relatorio_4/#identificacao-da-issue","title":"Identifica\u00e7\u00e3o da Issue","text":"<p>Devido a dificuldade de encontrar issues com funcionalidades compat\u00edveis com o TDD, uma vez que a maioria das issues se refere \u00e0 ajustes em componentes visuais e os testes em tais componentes s\u00e3o de complexa implementa\u00e7\u00e3o devido \u00e0 utiliza\u00e7\u00e3o de mocks no frontend, optou-se pela elabora\u00e7\u00e3o de uma nova funcionalidade n\u00e3o registrada em issue.</p>"},{"location":"trabalho/relatorio_4/#especificacao","title":"Especifica\u00e7\u00e3o","text":"<p>Deve ser poss\u00edvel importar dados da plataforma no formato JSON.</p> <p>Crit\u00e9rios de aceita\u00e7\u00e3o:</p> <ul> <li>Enumeradores (enums) devem ser convertidos para string na convers\u00e3o.</li> <li>A convers\u00e3o deve ser recursiva, transformando em JSON objetos aninhados.</li> <li>Um array de objetos deve ser convertido para um array com objetos JSON.</li> </ul>"},{"location":"trabalho/relatorio_4/#execucao","title":"Execu\u00e7\u00e3o","text":""},{"location":"trabalho/relatorio_4/#primeiro-ciclo","title":"Primeiro Ciclo","text":"<p>Durante o primeiro ciclo de desenvolvimento um objeto do tipo <code>Student</code>, cuja especifica\u00e7\u00e3o est\u00e1 dispon\u00edvel na classe <code>api-output.ts</code>, ser\u00e1 convertido para JSON.</p> api-output.ts<pre><code>export interface ApiOutput {\nrequestId?: string;\n}\n\nexport interface Student extends ApiOutput {\nemail: string;\ncourseId: string;\nname: string;\nsectionName: string;\nteamName: string;\ngoogleId?: string;\ncomments?: string;\nkey?: string;\ninstitute?: string;\njoinState?: JoinState;\n}\n</code></pre> <p>Por motivos did\u00e1ticos, a convers\u00e3o para JSON ser\u00e1 feita sem a utiliza\u00e7\u00e3o de bibliotecas e fun\u00e7\u00f5es pr\u00f3prias, mas para facilitar a verifica\u00e7\u00e3o ser\u00e3o utilizados os m\u00e9todos do objeto JSON do typescript.</p>"},{"location":"trabalho/relatorio_4/#teste-red-state","title":"Teste - Red State","text":"<p>Ap\u00f3s a escrita do primeiro teste, a o arquivo de teste encontrava-se da seguinte maneira:</p> json-helper.spec.ts <p>Para que o teste fosse executado, foi necess\u00e1rio criar uma implementa\u00e7\u00e3o m\u00ednima, obedecendo as regras de compila\u00e7\u00e3o do projeto, que exige que as fun\u00e7\u00f5es declaradas sejam utilizadas assim como os par\u00e2metros da fun\u00e7\u00e3o.</p> json-helper.ts<pre><code>export class JsonHelper {\npublic static parseObjectToJSON(object: Object): string {\nreturn object as string\n}\n}\n</code></pre> <p>A primeira execu\u00e7\u00e3o do teste aponta corretamente o red state, demonstrando que o m\u00e9todo testado ainda n\u00e3o est\u00e1 implementado da maneira correta.</p> <p> <p>Primeira execu\u00e7\u00e3o do teste criado. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"<p>Em seguida, o m\u00e9todo <code>parseObjectToJSON</code> foi implementado da seguinte maneira:</p> json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst entries = Object.entries(object)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":\"${value}\"`;\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state","title":"Teste - Green State","text":"<p>E ent\u00e3o foi atingido o green state, com o sucesso ao rodar os testes:</p> <p> Confirma\u00e7\u00e3o do green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao","title":"Refatora\u00e7\u00e3o","text":"<p>N\u00e3o foi identificada necessidade de refatora\u00e7\u00e3o no m\u00e9todo, apenas no c\u00f3digo de teste, passando-o para a seguinte vers\u00e3o:</p> json-helper.spec.ts<pre><code> it(\"Should parse student to JSON\", () =&gt; {\nconst input: Student = {\nname: \"John Doe\",\ncourseId: \"TESTES\",\nemail: \"email@test.com.zt\",\nteamName: \"PassaNada\",\nsectionName: \"T01\"\n};\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre>"},{"location":"trabalho/relatorio_4/#segundo-ciclo","title":"Segundo Ciclo","text":"<p>Durante o segundo ciclo, um objeto gen\u00e9rico foi escolhido para o tratamento de valores <code>null</code>, que os valores nulos devem aparecer como <code>null</code> no JSON.</p>"},{"location":"trabalho/relatorio_4/#teste-red-state_1","title":"Teste - Red State","text":"<p>Foram elaborados dois testes para contemplar as duas situa\u00e7\u00f5es.</p> json-helper.spec.ts<pre><code>    it(\"Should parse null values as null\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\nemail: null,\n}\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p>Como esperado, a execu\u00e7\u00e3o deste teste ocasiona o red state:</p> <p> Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_1","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>    public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst entries = Object.entries(object)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value)\njsonResponse += `null`\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_1","title":"Teste - Green State","text":"<p>  Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_1","title":"Refatora\u00e7\u00e3o","text":"<p>N\u00e3o foi identificada necessidade de refatora\u00e7\u00e3o nesse ciclo.</p>"},{"location":"trabalho/relatorio_4/#terceiro-ciclo","title":"Terceiro Ciclo","text":"<p>Durante o terceiro ciclo, um objeto gen\u00e9rico foi escolhido para o tratamento de valores <code>undefined</code>, que n\u00e3o devem aparecer no JSON.</p>"},{"location":"trabalho/relatorio_4/#teste-red-state_2","title":"Teste - Red State","text":"json-helper.spec.ts<pre><code>it(\"Shouldn't contain undefined values\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\nage: undefined\n}\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p> Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_2","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>    public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value)\njsonResponse += `null`\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_2","title":"Teste - Green State","text":"<p>  Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_2","title":"Refatora\u00e7\u00e3o","text":"<p>Uma pequena mudan\u00e7a foi realizada durante a refatora\u00e7\u00e3o.</p> json-helper.ts<pre><code> public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\n\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value)\njsonResponse += value\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre> <p>Validada pela execu\u00e7\u00e3o correta dos testes.</p> <p> Testes em green state. </p>"},{"location":"trabalho/relatorio_4/#quarto-ciclo","title":"Quarto Ciclo","text":"<p>Durante o quarto ciclo ser\u00e1 feito o tratamento de n\u00fameros, que n\u00e3o devem ser rodeados por aspas em JSON.</p>"},{"location":"trabalho/relatorio_4/#teste-red-state_3","title":"Teste - Red State","text":"<p>Foram escritos tr\u00eas testes, para tratar n\u00fameros que s\u00e3o nativamente do tipo <code>number</code> e n\u00fameros em string.</p> json-helper.spec.ts<pre><code>    it(\"Shouldn't quote numberic values\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\nage: 25\n};\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\nit(\"Shouldn't quote float values\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\nscore: 50.2\n};\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\nit(\"Should quote string numbers\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\nage: \"25\"\n};\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p>A execu\u00e7\u00e3o destes testes indicou que a \u00faltima op\u00e7\u00e3o j\u00e1 est\u00e1 contemplada no c\u00f3digo.</p> <p> Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_3","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code> public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\n\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value)\njsonResponse += value\nelse if (typeof value === 'number')\njsonResponse += `${value}`\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_3","title":"Teste - Green State","text":"<p>  Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_3","title":"Refatora\u00e7\u00e3o","text":"json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\n\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || typeof value === 'number')\njsonResponse += value\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre> <p>Validada pela execu\u00e7\u00e3o correta dos testes.</p> <p> Testes em green state. </p>"},{"location":"trabalho/relatorio_4/#quinto-ciclo","title":"Quinto Ciclo","text":"<p>Durante o quinto ciclo os enums ser\u00e3o tratados, para isso foi escolhido um enum do pr\u00f3prio projeto, dispon\u00edvel na classe <code>api-output.ts</code>, o <code>JoinState</code>, que corresponde a um dos atributos de <code>Student</code>.</p> api-output.ts<pre><code>export enum JoinState {\nJOINED = \"JOINED\",\nNOT_JOINED = \"NOT_JOINED\",\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-red-state_4","title":"Teste - Red State","text":"json-helper.spec.ts<pre><code> it(\"Should parse enum as string\", () =&gt; {\nconst input: Student = {\nname: \"John Doe\",\ncourseId: \"TESTES\",\nemail: \"email@test.com.zt\",\nteamName: \"PassaNada\",\nsectionName: \"T01\",\njoinState: JoinState.JOINED\n};\n\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p>A execu\u00e7\u00e3o dos testes apontou que essa especifica\u00e7\u00e3o j\u00e1 estava contemplada na implementa\u00e7\u00e3o. Portanto, o ciclo foi encerrado nesse instante.</p> <p> Indica\u00e7\u00e3o de Green State </p>"},{"location":"trabalho/relatorio_4/#sexto-ciclo","title":"Sexto Ciclo","text":"<p>Durante o sexto ciclo, foi implementada o tratamento de valores do tipo <code>boolean</code>. Para isso foi utilizado um objeto do tipo <code>InstructorPermissionSet</code>.</p> api-output.ts<pre><code>export interface InstructorPermissionSet {\ncanModifyCourse: boolean;\ncanModifyInstructor: boolean;\ncanModifySession: boolean;\ncanModifyStudent: boolean;\ncanViewStudentInSections: boolean;\ncanViewSessionInSections: boolean;\ncanSubmitSessionInSections: boolean;\ncanModifySessionCommentsInSections: boolean;\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-red-state_5","title":"Teste - Red State","text":"json-helper.spec.ts<pre><code>it(\"Shouldn't quote boolean values\", () =&gt; {\nconst input: InstructorPermissionSet = {\ncanModifyCourse: true,\ncanModifyInstructor: true,\ncanModifySession: true,\ncanModifyStudent: true,\ncanViewStudentInSections: false,\ncanViewSessionInSections: false,\ncanSubmitSessionInSections: true,\ncanModifySessionCommentsInSections: true,\n};\n\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p> <p>Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_4","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst nonQuotable = ['number', 'boolean']\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || nonQuotable.indexOf(typeof value) != -1)\njsonResponse += value\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_4","title":"Teste - Green State","text":"<p> <p> Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_4","title":"Refatora\u00e7\u00e3o","text":"<p>N\u00e3o foi identificada necessidade de refatora\u00e7\u00e3o nesse ciclo.</p>"},{"location":"trabalho/relatorio_4/#setimo-ciclo","title":"S\u00e9timo Ciclo","text":"<p>Neste ciclo a convers\u00e3o de objetos aninhados foi implementada. Para isso foi utilizado um objeto do tipo <code>FeedbackSessionLogEntry</code>, que cont\u00e9m um enum e um objeto aninhado.</p> api-output.ts<pre><code>export interface FeedbackSessionLogEntry {\nstudentData: Student;\nfeedbackSessionLogType: FeedbackSessionLogType;\ntimestamp: number;\n}\n\nexport enum FeedbackSessionLogType {\nACCESS = \"access\",\nSUBMISSION = \"submission\",\nVIEW_RESULT = \"view result\",\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-red-state_6","title":"Teste - Red State","text":"json-helper.spec.ts <p> <p>Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_5","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst nonQuotable = ['number', 'boolean']\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || nonQuotable.indexOf(typeof value) != -1)\njsonResponse += value\nelse if (typeof value === 'object')\njsonResponse += this.parseObjectToJSON(value)\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_5","title":"Teste - Green State","text":"<p>  Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_5","title":"Refatora\u00e7\u00e3o","text":"<p>Um novo teste foi adicionado, para identificar se h\u00e1 falhas na convers\u00e3o de objetos com mais de um n\u00edvel de aninhamento.</p> json-helper.spec.ts<pre><code>it(\"Should parse nested objects with more levels\", () =&gt; {\nconst input: Object = {\nname: \"John Doe\",\naddress: {\ncountry: {\ncode: \"BR\",\nname: \"Brazil\"\n},\ncity: {\nstate: \"DF\",\nname: \"Bras\u00edlia\"\n}\n}\n}\n\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p>E a execu\u00e7\u00e3o deste teste apontou que essa especifica\u00e7\u00e3o tamb\u00e9m foi contemplada.</p> <p> Situa\u00e7\u00e3o de Green State. </p>"},{"location":"trabalho/relatorio_4/#oitavo-ciclo","title":"Oitavo Ciclo","text":"<p>Neste ciclo foi implementada a convers\u00e3o de atributos do tipo. Para isso foi utilizado um objeto do tipo <code>Notifications</code>:</p> api-output.ts<pre><code>export interface Notification extends ApiOutput {\nnotificationId: string;\nstartTimestamp: number;\nendTimestamp: number;\ncreatedAt: number;\nstyle: NotificationStyle;\ntargetUser: NotificationTargetUser;\ntitle: string;\nmessage: string;\nshown: boolean;\n}\n\nexport interface Notifications extends ApiOutput {\nnotifications: Notification[];\n}\n\n\nexport enum NotificationStyle {\nPRIMARY = \"PRIMARY\",\nSECONDARY = \"SECONDARY\",\nSUCCESS = \"SUCCESS\",\nDANGER = \"DANGER\",\nWARNING = \"WARNING\",\nINFO = \"INFO\",\nLIGHT = \"LIGHT\",\nDARK = \"DARK\",\n}\n\n\nexport enum NotificationTargetUser {\nSTUDENT = \"STUDENT\",\nINSTRUCTOR = \"INSTRUCTOR\",\nGENERAL = \"GENERAL\",\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-red-state_7","title":"Teste - Red State","text":"json-helper.spec.ts<pre><code>it(\"Should parse array attribute\", () =&gt; {\nconst input: Notifications = {\nnotifications: [\n{\nnotificationId: \"41841\",\nstartTimestamp: 1688826966,\nendTimestamp: 1688827486,\ncreatedAt: 1688826999,\nstyle: NotificationStyle.WARNING,\ntargetUser: NotificationTargetUser.STUDENT,\ntitle: \"Activity wanting attention\",\nmessage: \"Don't forget to fill your feedback sessions.\",\nshown: true,\n},\n{\nnotificationId: \"1894\",\nstartTimestamp: 1688812547,\nendTimestamp: 1688812458,\ncreatedAt: 1688812200,\nstyle: NotificationStyle.DANGER,\ntargetUser: NotificationTargetUser.INSTRUCTOR,\ntitle: \"Invalid Submission\",\nmessage: \"The data submitted for course was invalid.\",\nshown: false,\n}\n]\n}\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p> Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_6","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst nonQuotable = ['number', 'boolean']\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || nonQuotable.indexOf(typeof value) != -1)\njsonResponse += value\nelse if (value instanceof Array) {\njsonResponse += '['\njsonResponse += value.map(value =&gt; this.parseObjectToJSON(value)).join(',')\njsonResponse += ']'\n}\nelse if (typeof value === 'object')\njsonResponse += this.parseObjectToJSON(value)\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_6","title":"Teste - Green State","text":"<p>  Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_6","title":"Refatora\u00e7\u00e3o","text":"<p>Ap\u00f3s a refatora\u00e7\u00e3o, o c\u00f3digo ficou da seguinte maneira:</p> json-helper.ts<pre><code>public static parseObjectToJSON(object: Object): string {\nlet jsonResponse = \"{\"\nconst nonQuotable = ['number', 'boolean']\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || nonQuotable.indexOf(typeof value) != -1)\njsonResponse += value\nelse if (value instanceof Array)\njsonResponse += `[${value.map(value =&gt; this.parseObjectToJSON(value)).join(',')}]`\nelse if (typeof value === 'object')\njsonResponse += this.parseObjectToJSON(value)\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\nreturn jsonResponse\n}\n</code></pre> <p>Validada pela execu\u00e7\u00e3o correta dos testes.</p> <p> Testes em green state. </p>"},{"location":"trabalho/relatorio_4/#nono-ciclo","title":"Nono Ciclo","text":"<p>Neste ciclo foi implementada a convers\u00e3o de um array de objetos.</p>"},{"location":"trabalho/relatorio_4/#teste-red-state_8","title":"Teste - Red State","text":"json-helper.spec.ts<pre><code>it(\"Should parse array attribute\", () =&gt; {imagin\nconst input: Notifications = {\nnotifications: [\n{\nnotificationId: \"41841\",\nstartTimestamp: 1688826966,\nendTimestamp: 1688827486,\ncreatedAt: 1688826999,\nstyle: NotificationStyle.WARNING,\ntargetUser: NotificationTargetUser.STUDENT,\ntitle: \"Activity wanting attention\",\nmessage: \"Don't forget to fill your feedback sessions.\",\nshown: true,\n},\n{\nnotificationId: \"1894\",\nstartTimestamp: 1688812547,\nendTimestamp: 1688812458,\ncreatedAt: 1688812200,\nstyle: NotificationStyle.DANGER,\ntargetUser: NotificationTargetUser.INSTRUCTOR,\ntitle: \"Invalid Submission\",\nmessage: \"The data submitted for course was invalid.\",\nshown: false,\n}\n]\n}\nexpect(JsonHelper.parseObjectToJSON(input)).toEqual(JSON.stringify(input))\n})\n</code></pre> <p> Testes no red state. </p>"},{"location":"trabalho/relatorio_4/#implementacao-do-codigo_7","title":"Implementa\u00e7\u00e3o do C\u00f3digo","text":"json-helper.ts<pre><code>export class JsonHelper {\n\npublic static parseObjectToJSON(object: Object): string {\nlet jsonResponse: string;\nif (object instanceof Array) {\njsonResponse = `[${object.map(obj =&gt; this.parseObjectToJSON(obj)).join(',')}]`\n\n} else {\njsonResponse = \"{\"\nconst nonQuotable = ['number', 'boolean']\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined)\nfor (const entry of entries) {\nconst [key, value] = entry\njsonResponse += `\"${key}\":`;\nif (!value || nonQuotable.indexOf(typeof value) != -1)\njsonResponse += value\nelse if (value instanceof Array)\njsonResponse += `[${value.map(value =&gt; this.parseObjectToJSON(value)).join(',')}]`\nelse if (typeof value === 'object')\njsonResponse += this.parseObjectToJSON(value)\nelse\njsonResponse += `\"${value}\"`\nif (entries.indexOf(entry) != entries.length - 1)\njsonResponse += \",\"\n}\njsonResponse += \"}\"\n}\nreturn jsonResponse\n}\n\n}\n</code></pre>"},{"location":"trabalho/relatorio_4/#teste-green-state_7","title":"Teste - Green State","text":"<p> Teste no green state. </p>"},{"location":"trabalho/relatorio_4/#refatoracao_7","title":"Refatora\u00e7\u00e3o","text":"<p>Ap\u00f3s a refatora\u00e7\u00e3o, o c\u00f3digo ficou da seguinte maneira:</p> json-helper.ts<pre><code>export class JsonHelper {\n\npublic static parseObjectToJSON(object: Object): string {\n\nif (object instanceof Array)\nreturn `[${object.map(obj =&gt; this.parseObjectToJSON(obj)).join(',')}]`\n\nconst entries = Object.entries(object).filter(entry =&gt; entry[1] !== undefined).map(entry =&gt; {\nreturn `\"${entry[0]}\":${this.parseAttributeToJson(entry[1])}`;\n})\nreturn `{${entries.join(\",\")}}`\n}\n\nprivate static parseAttributeToJson(value: Object) {\nconst nonQuotable = ['number', 'boolean']\nif (!value || nonQuotable.indexOf(typeof value) != -1)\nreturn value\nelse if (value instanceof Array)\nreturn `[${value.map(value =&gt; this.parseObjectToJSON(value)).join(',')}]`\nelse if (typeof value === 'object')\nreturn this.parseObjectToJSON(value)\nreturn `\"${value}\"`\n}\n\n}\n</code></pre> <p>Validada pela execu\u00e7\u00e3o correta dos testes.</p> <p> Testes em green state. </p>"},{"location":"trabalho/relatorio_4/#codigo-fonte","title":"C\u00f3digo Fonte","text":"Descri\u00e7\u00e3o Link C\u00f3digo de teste json-helper.spec.ts C\u00f3digo da funcionalidade json-helper.ts Commits Commit #cda69 e Commit #a039a"},{"location":"trabalho/relatorio_4/#resultado-final-da-execucao-dos-testes","title":"Resultado Final da Execu\u00e7\u00e3o dos Testes","text":"<p> Resultado Final </p>"},{"location":"trabalho/relatorio_4/#conclusao","title":"Conclus\u00e3o","text":"<p>A realiza\u00e7\u00e3o de um m\u00e9todo utilit\u00e1rio com a metodologia Test-Driven Development foi essencial para a fixa\u00e7\u00e3o das etapas de desenvolvimento e documenta\u00e7\u00e3o do requisito elaborado. A escolha da fun\u00e7\u00e3o teve maior influ\u00eancia pelo fator did\u00e1tico, uma vez que o pr\u00f3prio javascript faz essa convers\u00e3o automaticamente com o m\u00e9todo que foi utilizado para testar. Foram encontradas dificuldades em aplicar TDD em funcionalidades propostas em issues abertas, por envolverem mais conhecimento de c\u00f3digo e do projeto em si. Al\u00e9m disso, durante o per\u00edodo do trabalho, n\u00e3o foi poss\u00edvel encontrar outros projetos com boas issues iniciais e prop\u00edcias para o TDD, uma vez que muitas issues s\u00e3o referentes \u00e0 problemas em interfaces, bugs visuais e problemas correlatos, que envolvem uma configura\u00e7\u00e3o maior dos testes, escapando do escopo do TDD. Como citado anteriormente, esse m\u00e9todo, embora adequado para o aprendizado, n\u00e3o agrega valor ao produto <code>teammates</code>, por este motivo n\u00e3o foi realizado um <code>Pull Request</code>.</p> <p>Este documento explicita como os testes podem fornecer uma documenta\u00e7\u00e3o detalhada acerca da funcionalidade, uma vez que pelos nomes dos testes realizados \u00e9 poss\u00edvel extrair todos os crit\u00e9rios de aceita\u00e7\u00e3o do requisito especificado inicialmente, em um n\u00edvel entre baixo e alto n\u00edvel, isto \u00e9, esses requisitos est\u00e3o em um n\u00edvel de compreens\u00e3o compat\u00edvel com um analista de requisitos e um desenvolvedor.</p>"}]}